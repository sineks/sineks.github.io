{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/Snipaste_2020-02-18_15-52-36.png","path":"images/Snipaste_2020-02-18_15-52-36.png","modified":1,"renderable":0},{"_id":"source/images/Snipaste_2020-02-18_15-55-49.png","path":"images/Snipaste_2020-02-18_15-55-49.png","modified":1,"renderable":0},{"_id":"source/images/Snipaste_2020-02-18_16-03-49.png","path":"images/Snipaste_2020-02-18_16-03-49.png","modified":1,"renderable":0},{"_id":"source/images/nc001.JPG","path":"images/nc001.JPG","modified":1,"renderable":0},{"_id":"source/images/nc002.JPG","path":"images/nc002.JPG","modified":1,"renderable":0},{"_id":"source/images/nc003.JPG","path":"images/nc003.JPG","modified":1,"renderable":0},{"_id":"source/images/nc004.JPG","path":"images/nc004.JPG","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"e9634a7245835399ca21bfb1631b890a65e2f78f","modified":1635147021213},{"_id":"source/_drafts/Untitled.md","hash":"4ac3eaf125bd42b6cf05977d827cfcc9cbbbb240","modified":1635171934436},{"_id":"source/_posts/MultiAccoutOfGithubOnOneComputer.md","hash":"74cb4a2046b4785c17fd4b7932616e8aa03065b6","modified":1635147021214},{"_id":"source/_posts/RecordofCreatBlogWithHexo.md","hash":"ddd31e116101fd01fae64069165ca0324adf595a","modified":1635147021214},{"_id":"source/_posts/add-gitalk-to-hexo.md","hash":"abe30fe333d7874057390a3fd5fc46c9dd31c97c","modified":1635147021214},{"_id":"source/_posts/firstpost.md","hash":"8c7750ecc27bb682b6aa5f3d13da859544d82f45","modified":1635147021215},{"_id":"source/_posts/hexoblogcommand.md","hash":"ebc50f9fca5c9ef7aeefe3c4fb0eabb5d7f353e7","modified":1635147021215},{"_id":"source/_posts/nextcloudupdate.md","hash":"0a43bb95474e0a9b0384351d3b5ae2ebe7a52ea1","modified":1635147021215},{"_id":"source/_posts/setup-git-server-on-lan-server.md","hash":"ff988bac8b3e8969192056cea422ccc7e7a3a8b7","modified":1635147021216},{"_id":"source/_posts/sublimetext3markdwon.md","hash":"944959a1d4865cf0f7938794d31aed912b1910f7","modified":1635147021216},{"_id":"source/_posts/testnew.md","hash":"20864c60adefe73282fb24447c27b71563a0c03e","modified":1635172080298},{"_id":"source/categories/index.md","hash":"fdb3a69c7d9ac80a76aa0ed0d0fa2bbb99533c17","modified":1635147021217},{"_id":"source/images/Snipaste_2020-02-18_15-52-36.png","hash":"3c36a3e58c0d0dee5563226055b638865ee95d62","modified":1635147021217},{"_id":"source/images/Snipaste_2020-02-18_15-55-49.png","hash":"cd2f5ab11881af1659e9543462d1c1c0ae852276","modified":1635147021217},{"_id":"source/images/Snipaste_2020-02-18_16-03-49.png","hash":"6bdeba9b909dde34157c6a2ea34de101cf0255c4","modified":1635147021218},{"_id":"source/images/nc001.JPG","hash":"c2b8537b07e15fb26ec9172b83aa04088a0f5840","modified":1635147021219},{"_id":"source/images/nc002.JPG","hash":"a5e2284353d867bcb1de07719cd3ad3e7a544979","modified":1635147021220},{"_id":"source/images/nc003.JPG","hash":"2dc18190b5afde0bd8d927268c42c7cb817ce7f6","modified":1635147021220},{"_id":"source/images/nc004.JPG","hash":"f775c0452407b721f5d51a0ec82f347e75ba0e70","modified":1635147021221},{"_id":"source/tags/index.md","hash":"4d671b11b11e361e27fd887006729e1f6a3626b0","modified":1635147021222},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632303131000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1632303131000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1632303131000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1632303131000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1632303131000},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1632303131000},{"_id":"themes/fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1632303131000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1632303131000},{"_id":"themes/fluid/_config.yml","hash":"cd5cbd070b6190aa0b4839400c0a1581e2654470","modified":1632303131000},{"_id":"themes/fluid/package.json","hash":"18f04247801549fe78600c1ee9c601fcbea4cab3","modified":1632303131000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1632303131000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1632303131000},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1632303131000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1632303131000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1632303131000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1632303131000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1632303131000},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1632303131000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1632303131000},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1632303131000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1632303131000},{"_id":"themes/fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":1632303131000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1632303131000},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1632303131000},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1632303131000},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1632303131000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1632303131000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1632303131000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1632303131000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"7d0cf31f2595cfe6d5ad31d569654f21a00dfd77","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1632303131000},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1632303131000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1632303131000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1632303131000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1632303131000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1632303131000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"8e33f915028ac56258f6999d19b1ad8d800cecfe","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1632303131000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1632303131000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1632303131000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1632303131000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1632303131000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1632303131000},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1632303131000},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1632303131000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1632303131000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1632303131000},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1632303131000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1632303131000},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1632303131000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1632303131000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1632303131000},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1632303131000},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1632303131000},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1632303131000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1632303131000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ece659572cf4e12638a1607fca512c25098bbd82","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1632303131000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1632303131000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1632303131000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1632303131000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":1632303131000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1632303131000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1632303131000},{"_id":"public/local-search.xml","hash":"f6a06b8c7b7c314abae318fe433a6ea8c426caf9","modified":1635173005706},{"_id":"public/categories/index.html","hash":"de5f123aca22acd908f29c247427f624dee72c03","modified":1635173005706},{"_id":"public/tags/index.html","hash":"e9df75b7b7668e8de7f6b66a1885d77e9c4510b0","modified":1635173005706},{"_id":"public/2021/testnew/index.html","hash":"c2ba31aa030f4e13c52f103e5aec29431c3a6be4","modified":1635173005706},{"_id":"public/2020/nextcloudupdate/index.html","hash":"a3e1b3ead1854e22fefd7fea0b3e0a28f2e618f2","modified":1635173005706},{"_id":"public/2020/hexoblogcommand/index.html","hash":"eed8a7d8f708a62853fbe0264dffc2746301de8e","modified":1635173005706},{"_id":"public/2020/RecordofCreatBlogWithHexo/index.html","hash":"4074677632b948aae74f3215651dc555687a101f","modified":1635173005706},{"_id":"public/2020/firstpost/index.html","hash":"89dc4b2916ec47717982fb14d13e9ae18e5a18f6","modified":1635173005706},{"_id":"public/archives/index.html","hash":"2e68cf31a80b96b7fde2e543ae7dbe2f7bad2cca","modified":1635173005706},{"_id":"public/archives/2020/index.html","hash":"923ce8106ac239e8987bb40aa09512f4b917f8c7","modified":1635173005706},{"_id":"public/archives/2020/02/index.html","hash":"4334dd07ee2cdc034b413317856aa603442d56ee","modified":1635173005706},{"_id":"public/archives/2020/03/index.html","hash":"c23c012281fc25ed38dfd26ae643d8bdf8e2e8df","modified":1635173005706},{"_id":"public/archives/2020/04/index.html","hash":"e007547c1e437282dfe2818f1824b1ce10231625","modified":1635173005706},{"_id":"public/archives/2021/index.html","hash":"a53dd8cc89434cfd69628633e4de94230ca38efc","modified":1635173005706},{"_id":"public/archives/2021/10/index.html","hash":"acd9591c5c564ba9b77b4d476ba9718a573a3718","modified":1635173005706},{"_id":"public/categories/github/index.html","hash":"803b73b630730261dafcf9c4f52c51bb4cf61788","modified":1635173005706},{"_id":"public/tags/github/index.html","hash":"c51c2bb45ab0dd40a388bb00d3761a7d8f22f02f","modified":1635173005706},{"_id":"public/tags/hexo/index.html","hash":"b37cd9b45824987496caa6d2b98ae8235a04d525","modified":1635173005706},{"_id":"public/tags/git/index.html","hash":"f7833fbc22efa62d3531e6fab25ba5939116b805","modified":1635173005706},{"_id":"public/tags/nextcloud/index.html","hash":"8925bcfc034a9f3a723d13e361772a541674bf71","modified":1635173005706},{"_id":"public/tags/markdown/index.html","hash":"0641d43e39fd056be80a23b6e1a033fd44939490","modified":1635173005706},{"_id":"public/404.html","hash":"8a0c8933bfd7ca62b17e31e4ebdf242f2a06321f","modified":1635173005706},{"_id":"public/links/index.html","hash":"8fbbac6bab840061cf8d57859d9c5a8df3b3ece1","modified":1635173005706},{"_id":"public/2020/add-gitalk-to-hexo/index.html","hash":"1ad5cc470ce531359e59f9f970785109a0a4041f","modified":1635173005706},{"_id":"public/2020/setup-git-server-on-lan-server/index.html","hash":"9074a43f88bb4f4ef912c1d75a7425e4a6375f5a","modified":1635173005706},{"_id":"public/2020/sublimetext3markdwon/index.html","hash":"99bb19cc9a60c1edae1a06b749cfc52aea5da637","modified":1635173005706},{"_id":"public/2020/MultiAccoutOfGithubOnOneComputer/index.html","hash":"74ed8054a80b48e593592a4d84f043450d002233","modified":1635173005706},{"_id":"public/index.html","hash":"ad8553b064504914cbd64dcae774cb7d947322e7","modified":1635173005706},{"_id":"public/CNAME","hash":"e9634a7245835399ca21bfb1631b890a65e2f78f","modified":1635173005706},{"_id":"public/images/Snipaste_2020-02-18_15-52-36.png","hash":"3c36a3e58c0d0dee5563226055b638865ee95d62","modified":1635173005706},{"_id":"public/images/Snipaste_2020-02-18_15-55-49.png","hash":"cd2f5ab11881af1659e9543462d1c1c0ae852276","modified":1635173005706},{"_id":"public/images/Snipaste_2020-02-18_16-03-49.png","hash":"6bdeba9b909dde34157c6a2ea34de101cf0255c4","modified":1635173005706},{"_id":"public/images/nc002.JPG","hash":"a5e2284353d867bcb1de07719cd3ad3e7a544979","modified":1635173005706},{"_id":"public/images/nc001.JPG","hash":"c2b8537b07e15fb26ec9172b83aa04088a0f5840","modified":1635173005706},{"_id":"public/images/nc003.JPG","hash":"2dc18190b5afde0bd8d927268c42c7cb817ce7f6","modified":1635173005706},{"_id":"public/images/nc004.JPG","hash":"f775c0452407b721f5d51a0ec82f347e75ba0e70","modified":1635173005706},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1635173005706},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1635173005706},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1635173005706},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1635173005706},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1635173005706},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1635173005706},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1635173005706},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1635173005706},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1635173005706},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1635173005706},{"_id":"public/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1635173005706},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1635173005706},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1635173005706},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1635173005706},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1635173005706},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1635173005706},{"_id":"public/css/main.css","hash":"80b7c3dc3f47db8b700b4437bdf45706fe504f66","modified":1635173005706}],"Category":[{"name":"github","_id":"ckv6rsenz0007v4g07byb5qgf"}],"Data":[],"Page":[{"title":"分类","date":"2018-10-10T04:22:12.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-10-10 12:22:12\ntype: \"categories\"\n---\n","updated":"2018-10-10T04:22:12.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckv6rseni0000v4g0e9btan02","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"标签","date":"2018-10-10T04:21:48.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-10 12:21:48\ntype: \"tags\"\n---","updated":"2018-10-10T04:21:48.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckv6rsenp0002v4g0005jgi5i","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"Untitled","author":"iubuntu","_content":"\n","source":"_drafts/Untitled.md","raw":"---\ntitle: Untitled\nauthor: iubuntu\ntags:\n---\n\n","slug":"Untitled","published":0,"date":"2021-10-25T10:43:52.721Z","updated":"2021-10-25T10:43:52.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rsenm0001v4g0730dcn0g","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"在一台电脑上配置多个Github账号并分别同步不同项目","date":"2020-03-22T15:56:44.000Z","_content":"\n## 前言\n果然是折腾无止境。我原本是在github上用hexo建了一个博客，建设过程不复杂，网上很多详细教程。然后问题在于：\n- 1、我新建了一个Github账号（新账号）来部署这个博客；\n- 2、我是在工作电脑上安装的虚拟机上部署的Lubuntu然后搭建的hexo环境并上传到github；\n- 3、我想换家里的PC来写博客，而且家里的PC之前配置过另一个Git账号（旧账号）。\n\n<!-- more -->\n\n我蛋疼的一比！\n所以现在我需要解决的问题有：\n1. 怎么把写博客的环境迁移到家里的PC上？\n2. 家里的PC已经配置过旧Github账号，如果添加新账号？\n\n## Q1：怎么迁移博客环境？\n这个问题网上也有详细教程，后面再说\n\n## Q2：一台电脑多个Github账号的配置\n\n### 0. 关于账号的问题\n网上有的教程是说要删除电脑上之前配置的Global Username，但我测试下来可以对单独的项目指定单独的Username，指定后该项目会优先使用项目指定的Username。关于怎么指定项目的Username，可参考另一篇博文。\n\n### 1. 首先创建不同的SSH Key\n创建ssh key的命令为：\n```\nssh-keygen -t rsa -C \"your email\"\n```\n\n在旧账号上创建的时候，输入命令一路回车，就会创建`id_rsa`和`id_rsa.pub`两个文件，其中`.pub`结尾的文件是公钥，打开可以看到文件中的内容，就是要填写在Github上的。Windows下密钥会默认创建在`C:\\User\\用户名\\.ssh`文件夹中。\n创建新的ssh key，使用以上命令后，不能一路回车，在出现`Enter file in which to save the key (~/.ssh/id_rsa):`时需要输入文件名和保存位置，如果不输入保存位置则会在当前目录下生成，生成后把文件移至`C:\\User\\用户名\\.ssh`即可。我以生成`sineks`文件名为例。\n\n### 2. 识别新的密钥\n生成密钥后，需要执行`ssh-agent`让`ssh`识别新的密钥：\n```\n$ ssh-agent bash\n$ ssh-add ~/.ssh/sineks\n```\n*如果直接执行上面第二条命令，我这里提示`Could not open a connection to your authentication agent `，所以需要先输入第一条命令。*\n\n**这里需要注意的是，我在操作过程中，生成新的ssh key后并执行`ssh-agent`后，旧的ssh key似乎被新key替换掉了，所以需要把旧的ssh key也用`ssh-agent`执行一次，这样两个key就都能识别了。**\n\n### 3. 配置/.ssh/config文件\n我的Windows下.ssh文件夹是没有config文件的，新建一个，并在其中输入：\n\n```\n# 该文件用于配置私钥对应的服务器\n\n# Default github user(kakabryan@gmail.com)\nHost github.com\nHostName github.com\nUser ranba\nIdentityFile ~/.ssh/id_rsa\n\n# another github user(greatubuntu@gmail.com)\nHost sineks.github.com\nHostName github.com\nUser sineks\nIdentityFile ~/.ssh/sineks\n```\n\n上面两段语句说明了对不同的账号，设置不同的Host、User、IdentityFile(ssh key)。下面这段是我的新账号的设置，这里的Host我们定义了一个`sineks.github.com`，看网上的教程也可以定义成其它的，应该只是告诉git这里的名字不一样。具体后面再说。\n\n### 4. 测试是否成功\n输入：\n```\n$ ssh -T git@github.com\n$ ssh -T git@sineks.github.com\n```\n来分别测试两个账号是否连接成功。如果成功，两个账号应分别显示各自的User Name：\n\n![](/images/Snipaste_2020-02-18_15-52-36.png)\n\n![](/images/Snipaste_2020-02-18_15-55-49.png)\n\n### 5. 最后配置git上传\n我在本地有一个仓库（假定已有`.git`文件夹需要上传到github新账号上，首先需要在这个仓库里git bash，然后输入以下命令：\n```\n$ git remote rm origin\n$ git remote add origin git@sineks.github.com:sineks/xxx.git\n```\n正如之前我们定义/.ssh/config文件时提到的Host，这两条命令的作用应该是修改本仓库上传时使用的Host信息，如果不修改的话，我这里会发生仍然上传到旧账号上面去的情况，并提示没有在旧账号上找到对应的仓库。\n\n我们也可以修改.git文件夹下的cofnig文件：\n\n![](/images/Snipaste_2020-02-18_16-03-49.png)\n\n作用应该是一样的。我是通过修改config文件实现的。\n\n修改完成后git add、git commit、git push就顺利完成了。\n\n\n\n\n","source":"_posts/MultiAccoutOfGithubOnOneComputer.md","raw":"---\ntitle: 在一台电脑上配置多个Github账号并分别同步不同项目\ndate: 2020-03-22 23:56:44\ntags: github\n---\n\n## 前言\n果然是折腾无止境。我原本是在github上用hexo建了一个博客，建设过程不复杂，网上很多详细教程。然后问题在于：\n- 1、我新建了一个Github账号（新账号）来部署这个博客；\n- 2、我是在工作电脑上安装的虚拟机上部署的Lubuntu然后搭建的hexo环境并上传到github；\n- 3、我想换家里的PC来写博客，而且家里的PC之前配置过另一个Git账号（旧账号）。\n\n<!-- more -->\n\n我蛋疼的一比！\n所以现在我需要解决的问题有：\n1. 怎么把写博客的环境迁移到家里的PC上？\n2. 家里的PC已经配置过旧Github账号，如果添加新账号？\n\n## Q1：怎么迁移博客环境？\n这个问题网上也有详细教程，后面再说\n\n## Q2：一台电脑多个Github账号的配置\n\n### 0. 关于账号的问题\n网上有的教程是说要删除电脑上之前配置的Global Username，但我测试下来可以对单独的项目指定单独的Username，指定后该项目会优先使用项目指定的Username。关于怎么指定项目的Username，可参考另一篇博文。\n\n### 1. 首先创建不同的SSH Key\n创建ssh key的命令为：\n```\nssh-keygen -t rsa -C \"your email\"\n```\n\n在旧账号上创建的时候，输入命令一路回车，就会创建`id_rsa`和`id_rsa.pub`两个文件，其中`.pub`结尾的文件是公钥，打开可以看到文件中的内容，就是要填写在Github上的。Windows下密钥会默认创建在`C:\\User\\用户名\\.ssh`文件夹中。\n创建新的ssh key，使用以上命令后，不能一路回车，在出现`Enter file in which to save the key (~/.ssh/id_rsa):`时需要输入文件名和保存位置，如果不输入保存位置则会在当前目录下生成，生成后把文件移至`C:\\User\\用户名\\.ssh`即可。我以生成`sineks`文件名为例。\n\n### 2. 识别新的密钥\n生成密钥后，需要执行`ssh-agent`让`ssh`识别新的密钥：\n```\n$ ssh-agent bash\n$ ssh-add ~/.ssh/sineks\n```\n*如果直接执行上面第二条命令，我这里提示`Could not open a connection to your authentication agent `，所以需要先输入第一条命令。*\n\n**这里需要注意的是，我在操作过程中，生成新的ssh key后并执行`ssh-agent`后，旧的ssh key似乎被新key替换掉了，所以需要把旧的ssh key也用`ssh-agent`执行一次，这样两个key就都能识别了。**\n\n### 3. 配置/.ssh/config文件\n我的Windows下.ssh文件夹是没有config文件的，新建一个，并在其中输入：\n\n```\n# 该文件用于配置私钥对应的服务器\n\n# Default github user(kakabryan@gmail.com)\nHost github.com\nHostName github.com\nUser ranba\nIdentityFile ~/.ssh/id_rsa\n\n# another github user(greatubuntu@gmail.com)\nHost sineks.github.com\nHostName github.com\nUser sineks\nIdentityFile ~/.ssh/sineks\n```\n\n上面两段语句说明了对不同的账号，设置不同的Host、User、IdentityFile(ssh key)。下面这段是我的新账号的设置，这里的Host我们定义了一个`sineks.github.com`，看网上的教程也可以定义成其它的，应该只是告诉git这里的名字不一样。具体后面再说。\n\n### 4. 测试是否成功\n输入：\n```\n$ ssh -T git@github.com\n$ ssh -T git@sineks.github.com\n```\n来分别测试两个账号是否连接成功。如果成功，两个账号应分别显示各自的User Name：\n\n![](/images/Snipaste_2020-02-18_15-52-36.png)\n\n![](/images/Snipaste_2020-02-18_15-55-49.png)\n\n### 5. 最后配置git上传\n我在本地有一个仓库（假定已有`.git`文件夹需要上传到github新账号上，首先需要在这个仓库里git bash，然后输入以下命令：\n```\n$ git remote rm origin\n$ git remote add origin git@sineks.github.com:sineks/xxx.git\n```\n正如之前我们定义/.ssh/config文件时提到的Host，这两条命令的作用应该是修改本仓库上传时使用的Host信息，如果不修改的话，我这里会发生仍然上传到旧账号上面去的情况，并提示没有在旧账号上找到对应的仓库。\n\n我们也可以修改.git文件夹下的cofnig文件：\n\n![](/images/Snipaste_2020-02-18_16-03-49.png)\n\n作用应该是一样的。我是通过修改config文件实现的。\n\n修改完成后git add、git commit、git push就顺利完成了。\n\n\n\n\n","slug":"MultiAccoutOfGithubOnOneComputer","published":1,"updated":"2020-03-22T15:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rsenq0003v4g0h4y3e5g5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>果然是折腾无止境。我原本是在github上用hexo建了一个博客，建设过程不复杂，网上很多详细教程。然后问题在于：</p>\n<ul>\n<li>1、我新建了一个Github账号（新账号）来部署这个博客；</li>\n<li>2、我是在工作电脑上安装的虚拟机上部署的Lubuntu然后搭建的hexo环境并上传到github；</li>\n<li>3、我想换家里的PC来写博客，而且家里的PC之前配置过另一个Git账号（旧账号）。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>我蛋疼的一比！<br>所以现在我需要解决的问题有：</p>\n<ol>\n<li>怎么把写博客的环境迁移到家里的PC上？</li>\n<li>家里的PC已经配置过旧Github账号，如果添加新账号？</li>\n</ol>\n<h2 id=\"Q1：怎么迁移博客环境？\"><a href=\"#Q1：怎么迁移博客环境？\" class=\"headerlink\" title=\"Q1：怎么迁移博客环境？\"></a>Q1：怎么迁移博客环境？</h2><p>这个问题网上也有详细教程，后面再说</p>\n<h2 id=\"Q2：一台电脑多个Github账号的配置\"><a href=\"#Q2：一台电脑多个Github账号的配置\" class=\"headerlink\" title=\"Q2：一台电脑多个Github账号的配置\"></a>Q2：一台电脑多个Github账号的配置</h2><h3 id=\"0-关于账号的问题\"><a href=\"#0-关于账号的问题\" class=\"headerlink\" title=\"0. 关于账号的问题\"></a>0. 关于账号的问题</h3><p>网上有的教程是说要删除电脑上之前配置的Global Username，但我测试下来可以对单独的项目指定单独的Username，指定后该项目会优先使用项目指定的Username。关于怎么指定项目的Username，可参考另一篇博文。</p>\n<h3 id=\"1-首先创建不同的SSH-Key\"><a href=\"#1-首先创建不同的SSH-Key\" class=\"headerlink\" title=\"1. 首先创建不同的SSH Key\"></a>1. 首先创建不同的SSH Key</h3><p>创建ssh key的命令为：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;your email&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>在旧账号上创建的时候，输入命令一路回车，就会创建<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，其中<code>.pub</code>结尾的文件是公钥，打开可以看到文件中的内容，就是要填写在Github上的。Windows下密钥会默认创建在<code>C:\\User\\用户名\\.ssh</code>文件夹中。<br>创建新的ssh key，使用以上命令后，不能一路回车，在出现<code>Enter file in which to save the key (~/.ssh/id_rsa):</code>时需要输入文件名和保存位置，如果不输入保存位置则会在当前目录下生成，生成后把文件移至<code>C:\\User\\用户名\\.ssh</code>即可。我以生成<code>sineks</code>文件名为例。</p>\n<h3 id=\"2-识别新的密钥\"><a href=\"#2-识别新的密钥\" class=\"headerlink\" title=\"2. 识别新的密钥\"></a>2. 识别新的密钥</h3><p>生成密钥后，需要执行<code>ssh-agent</code>让<code>ssh</code>识别新的密钥：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>ssh-agent bash<br><span class=\"hljs-variable\">$ </span>ssh-add ~<span class=\"hljs-regexp\">/.ssh/sineks</span><br></code></pre></td></tr></table></figure>\n<p><em>如果直接执行上面第二条命令，我这里提示<code>Could not open a connection to your authentication agent </code>，所以需要先输入第一条命令。</em></p>\n<p><strong>这里需要注意的是，我在操作过程中，生成新的ssh key后并执行<code>ssh-agent</code>后，旧的ssh key似乎被新key替换掉了，所以需要把旧的ssh key也用<code>ssh-agent</code>执行一次，这样两个key就都能识别了。</strong></p>\n<h3 id=\"3-配置-ssh-config文件\"><a href=\"#3-配置-ssh-config文件\" class=\"headerlink\" title=\"3. 配置/.ssh/config文件\"></a>3. 配置/.ssh/config文件</h3><p>我的Windows下.ssh文件夹是没有config文件的，新建一个，并在其中输入：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"># 该文件用于配置私钥对应的服务器<br><br># <span class=\"hljs-selector-tag\">Default</span> <span class=\"hljs-selector-tag\">github</span> <span class=\"hljs-selector-tag\">user</span>(kakabryan<span class=\"hljs-variable\">@gmail</span>.com)<br><span class=\"hljs-selector-tag\">Host</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">HostName</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">User</span> <span class=\"hljs-selector-tag\">ranba</span><br><span class=\"hljs-selector-tag\">IdentityFile</span> ~/<span class=\"hljs-selector-class\">.ssh</span>/<span class=\"hljs-selector-tag\">id_rsa</span><br><br># <span class=\"hljs-selector-tag\">another</span> <span class=\"hljs-selector-tag\">github</span> <span class=\"hljs-selector-tag\">user</span>(greatubuntu<span class=\"hljs-variable\">@gmail</span>.com)<br><span class=\"hljs-selector-tag\">Host</span> <span class=\"hljs-selector-tag\">sineks</span><span class=\"hljs-selector-class\">.github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">HostName</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">User</span> <span class=\"hljs-selector-tag\">sineks</span><br><span class=\"hljs-selector-tag\">IdentityFile</span> ~/<span class=\"hljs-selector-class\">.ssh</span>/<span class=\"hljs-selector-tag\">sineks</span><br></code></pre></td></tr></table></figure>\n\n<p>上面两段语句说明了对不同的账号，设置不同的Host、User、IdentityFile(ssh key)。下面这段是我的新账号的设置，这里的Host我们定义了一个<code>sineks.github.com</code>，看网上的教程也可以定义成其它的，应该只是告诉git这里的名字不一样。具体后面再说。</p>\n<h3 id=\"4-测试是否成功\"><a href=\"#4-测试是否成功\" class=\"headerlink\" title=\"4. 测试是否成功\"></a>4. 测试是否成功</h3><p>输入：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>ssh -T git<span class=\"hljs-variable\">@github</span>.com<br><span class=\"hljs-variable\">$ </span>ssh -T git<span class=\"hljs-variable\">@sineks</span>.github.com<br></code></pre></td></tr></table></figure>\n<p>来分别测试两个账号是否连接成功。如果成功，两个账号应分别显示各自的User Name：</p>\n<p><img src=\"/images/Snipaste_2020-02-18_15-52-36.png\"></p>\n<p><img src=\"/images/Snipaste_2020-02-18_15-55-49.png\"></p>\n<h3 id=\"5-最后配置git上传\"><a href=\"#5-最后配置git上传\" class=\"headerlink\" title=\"5. 最后配置git上传\"></a>5. 最后配置git上传</h3><p>我在本地有一个仓库（假定已有<code>.git</code>文件夹需要上传到github新账号上，首先需要在这个仓库里git bash，然后输入以下命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git remote rm origin<br><span class=\"hljs-variable\">$ </span>git remote add origin git<span class=\"hljs-variable\">@sineks</span>.<span class=\"hljs-symbol\">github.com:</span>sineks/xxx.git<br></code></pre></td></tr></table></figure>\n<p>正如之前我们定义/.ssh/config文件时提到的Host，这两条命令的作用应该是修改本仓库上传时使用的Host信息，如果不修改的话，我这里会发生仍然上传到旧账号上面去的情况，并提示没有在旧账号上找到对应的仓库。</p>\n<p>我们也可以修改.git文件夹下的cofnig文件：</p>\n<p><img src=\"/images/Snipaste_2020-02-18_16-03-49.png\"></p>\n<p>作用应该是一样的。我是通过修改config文件实现的。</p>\n<p>修改完成后git add、git commit、git push就顺利完成了。</p>\n","site":{"data":{}},"wordcount":1921,"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>果然是折腾无止境。我原本是在github上用hexo建了一个博客，建设过程不复杂，网上很多详细教程。然后问题在于：</p>\n<ul>\n<li>1、我新建了一个Github账号（新账号）来部署这个博客；</li>\n<li>2、我是在工作电脑上安装的虚拟机上部署的Lubuntu然后搭建的hexo环境并上传到github；</li>\n<li>3、我想换家里的PC来写博客，而且家里的PC之前配置过另一个Git账号（旧账号）。</li>\n</ul>","more":"<p>我蛋疼的一比！<br>所以现在我需要解决的问题有：</p>\n<ol>\n<li>怎么把写博客的环境迁移到家里的PC上？</li>\n<li>家里的PC已经配置过旧Github账号，如果添加新账号？</li>\n</ol>\n<h2 id=\"Q1：怎么迁移博客环境？\"><a href=\"#Q1：怎么迁移博客环境？\" class=\"headerlink\" title=\"Q1：怎么迁移博客环境？\"></a>Q1：怎么迁移博客环境？</h2><p>这个问题网上也有详细教程，后面再说</p>\n<h2 id=\"Q2：一台电脑多个Github账号的配置\"><a href=\"#Q2：一台电脑多个Github账号的配置\" class=\"headerlink\" title=\"Q2：一台电脑多个Github账号的配置\"></a>Q2：一台电脑多个Github账号的配置</h2><h3 id=\"0-关于账号的问题\"><a href=\"#0-关于账号的问题\" class=\"headerlink\" title=\"0. 关于账号的问题\"></a>0. 关于账号的问题</h3><p>网上有的教程是说要删除电脑上之前配置的Global Username，但我测试下来可以对单独的项目指定单独的Username，指定后该项目会优先使用项目指定的Username。关于怎么指定项目的Username，可参考另一篇博文。</p>\n<h3 id=\"1-首先创建不同的SSH-Key\"><a href=\"#1-首先创建不同的SSH-Key\" class=\"headerlink\" title=\"1. 首先创建不同的SSH Key\"></a>1. 首先创建不同的SSH Key</h3><p>创建ssh key的命令为：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh-keygen -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;your email&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>在旧账号上创建的时候，输入命令一路回车，就会创建<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，其中<code>.pub</code>结尾的文件是公钥，打开可以看到文件中的内容，就是要填写在Github上的。Windows下密钥会默认创建在<code>C:\\User\\用户名\\.ssh</code>文件夹中。<br>创建新的ssh key，使用以上命令后，不能一路回车，在出现<code>Enter file in which to save the key (~/.ssh/id_rsa):</code>时需要输入文件名和保存位置，如果不输入保存位置则会在当前目录下生成，生成后把文件移至<code>C:\\User\\用户名\\.ssh</code>即可。我以生成<code>sineks</code>文件名为例。</p>\n<h3 id=\"2-识别新的密钥\"><a href=\"#2-识别新的密钥\" class=\"headerlink\" title=\"2. 识别新的密钥\"></a>2. 识别新的密钥</h3><p>生成密钥后，需要执行<code>ssh-agent</code>让<code>ssh</code>识别新的密钥：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>ssh-agent bash<br><span class=\"hljs-variable\">$ </span>ssh-add ~<span class=\"hljs-regexp\">/.ssh/sineks</span><br></code></pre></td></tr></table></figure>\n<p><em>如果直接执行上面第二条命令，我这里提示<code>Could not open a connection to your authentication agent </code>，所以需要先输入第一条命令。</em></p>\n<p><strong>这里需要注意的是，我在操作过程中，生成新的ssh key后并执行<code>ssh-agent</code>后，旧的ssh key似乎被新key替换掉了，所以需要把旧的ssh key也用<code>ssh-agent</code>执行一次，这样两个key就都能识别了。</strong></p>\n<h3 id=\"3-配置-ssh-config文件\"><a href=\"#3-配置-ssh-config文件\" class=\"headerlink\" title=\"3. 配置/.ssh/config文件\"></a>3. 配置/.ssh/config文件</h3><p>我的Windows下.ssh文件夹是没有config文件的，新建一个，并在其中输入：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"># 该文件用于配置私钥对应的服务器<br><br># <span class=\"hljs-selector-tag\">Default</span> <span class=\"hljs-selector-tag\">github</span> <span class=\"hljs-selector-tag\">user</span>(kakabryan<span class=\"hljs-variable\">@gmail</span>.com)<br><span class=\"hljs-selector-tag\">Host</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">HostName</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">User</span> <span class=\"hljs-selector-tag\">ranba</span><br><span class=\"hljs-selector-tag\">IdentityFile</span> ~/<span class=\"hljs-selector-class\">.ssh</span>/<span class=\"hljs-selector-tag\">id_rsa</span><br><br># <span class=\"hljs-selector-tag\">another</span> <span class=\"hljs-selector-tag\">github</span> <span class=\"hljs-selector-tag\">user</span>(greatubuntu<span class=\"hljs-variable\">@gmail</span>.com)<br><span class=\"hljs-selector-tag\">Host</span> <span class=\"hljs-selector-tag\">sineks</span><span class=\"hljs-selector-class\">.github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">HostName</span> <span class=\"hljs-selector-tag\">github</span><span class=\"hljs-selector-class\">.com</span><br><span class=\"hljs-selector-tag\">User</span> <span class=\"hljs-selector-tag\">sineks</span><br><span class=\"hljs-selector-tag\">IdentityFile</span> ~/<span class=\"hljs-selector-class\">.ssh</span>/<span class=\"hljs-selector-tag\">sineks</span><br></code></pre></td></tr></table></figure>\n\n<p>上面两段语句说明了对不同的账号，设置不同的Host、User、IdentityFile(ssh key)。下面这段是我的新账号的设置，这里的Host我们定义了一个<code>sineks.github.com</code>，看网上的教程也可以定义成其它的，应该只是告诉git这里的名字不一样。具体后面再说。</p>\n<h3 id=\"4-测试是否成功\"><a href=\"#4-测试是否成功\" class=\"headerlink\" title=\"4. 测试是否成功\"></a>4. 测试是否成功</h3><p>输入：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>ssh -T git<span class=\"hljs-variable\">@github</span>.com<br><span class=\"hljs-variable\">$ </span>ssh -T git<span class=\"hljs-variable\">@sineks</span>.github.com<br></code></pre></td></tr></table></figure>\n<p>来分别测试两个账号是否连接成功。如果成功，两个账号应分别显示各自的User Name：</p>\n<p><img src=\"/images/Snipaste_2020-02-18_15-52-36.png\"></p>\n<p><img src=\"/images/Snipaste_2020-02-18_15-55-49.png\"></p>\n<h3 id=\"5-最后配置git上传\"><a href=\"#5-最后配置git上传\" class=\"headerlink\" title=\"5. 最后配置git上传\"></a>5. 最后配置git上传</h3><p>我在本地有一个仓库（假定已有<code>.git</code>文件夹需要上传到github新账号上，首先需要在这个仓库里git bash，然后输入以下命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git remote rm origin<br><span class=\"hljs-variable\">$ </span>git remote add origin git<span class=\"hljs-variable\">@sineks</span>.<span class=\"hljs-symbol\">github.com:</span>sineks/xxx.git<br></code></pre></td></tr></table></figure>\n<p>正如之前我们定义/.ssh/config文件时提到的Host，这两条命令的作用应该是修改本仓库上传时使用的Host信息，如果不修改的话，我这里会发生仍然上传到旧账号上面去的情况，并提示没有在旧账号上找到对应的仓库。</p>\n<p>我们也可以修改.git文件夹下的cofnig文件：</p>\n<p><img src=\"/images/Snipaste_2020-02-18_16-03-49.png\"></p>\n<p>作用应该是一样的。我是通过修改config文件实现的。</p>\n<p>修改完成后git add、git commit、git push就顺利完成了。</p>"},{"title":"搭建Hexo+Github博客全记录","date":"2020-02-18T15:01:54.000Z","_content":"\n准备挖个大坑，记录一下自己创建配置Hexo+Github博客的全过程，以我的惰性，估计要写很久。先列个提纲：\n    1. 搭建博客/域名绑定\n    2. 配置博客主题\n    3. 多终端写博客\n    4. 用Sublime舒服的写博客\n说真的，多看官网文档非常有帮助。所以如果这个大坑填补上，我觉得以后就是多看官方文档。**另外善用Google**。\n\n<!-- more -->","source":"_posts/RecordofCreatBlogWithHexo.md","raw":"---\ntitle: 搭建Hexo+Github博客全记录\ndate: 2020-02-18 23:01:54\ntags:\n    - hexo\n    - git\n    - github\ncategories:\n    - github\n---\n\n准备挖个大坑，记录一下自己创建配置Hexo+Github博客的全过程，以我的惰性，估计要写很久。先列个提纲：\n    1. 搭建博客/域名绑定\n    2. 配置博客主题\n    3. 多终端写博客\n    4. 用Sublime舒服的写博客\n说真的，多看官网文档非常有帮助。所以如果这个大坑填补上，我觉得以后就是多看官方文档。**另外善用Google**。\n\n<!-- more -->","slug":"RecordofCreatBlogWithHexo","published":1,"updated":"2020-02-18T15:01:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rsent0004v4g0eypp9nr8","content":"<p>准备挖个大坑，记录一下自己创建配置Hexo+Github博客的全过程，以我的惰性，估计要写很久。先列个提纲：<br>    1. 搭建博客/域名绑定<br>    2. 配置博客主题<br>    3. 多终端写博客<br>    4. 用Sublime舒服的写博客<br>说真的，多看官网文档非常有帮助。所以如果这个大坑填补上，我觉得以后就是多看官方文档。<strong>另外善用Google</strong>。</p>\n<span id=\"more\"></span>","site":{"data":{}},"wordcount":150,"excerpt":"<p>准备挖个大坑，记录一下自己创建配置Hexo+Github博客的全过程，以我的惰性，估计要写很久。先列个提纲：<br>    1. 搭建博客/域名绑定<br>    2. 配置博客主题<br>    3. 多终端写博客<br>    4. 用Sublime舒服的写博客<br>说真的，多看官网文档非常有帮助。所以如果这个大坑填补上，我觉得以后就是多看官方文档。<strong>另外善用Google</strong>。</p>","more":""},{"title":"Hexo博客Next主题添加Gitalk评论插件","date":"2020-04-12T12:29:35.000Z","_content":"为了给这个博客加个评论功能，网上搜索一番，找到N个教程，做了M个尝试，最后发现自己蠢死了，我用的Next主题版本自带gitalk功能，简单配置一下就行了。\n\n## 申请Github的OAuth应用程序\n\n[申请地址](https://github.com/settings/developers)\n登陆后点击右上的`New OAuth APP`按钮，看下图填写(盗一个知乎的图）：\n![newoauthapp](https://pic2.zhimg.com/80/v2-054ceed11a9a35e0855136ef21061b81_720w.jpg)\n需要注意的是，如果绑定了自己的域名，这里`主页网址`和`授权回调网址`请填写自己的域名地址，比如我填写的就是`https://blog.muzy.cc`。\n\n注册后会得到`Client ID`和`Client Secret`两个参数。\n\n## 配置Next主题\n\n我的Next主题版本是`NexT.Muse v7.7.1`，可以直接配置gitalk。打开位于`/themes/next/`下的`_config.yml`文件，找到`gitalk`模块，按照以下配置：\n```\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id: sineks # GitHub repo owner\n  repo: sineks.github.io # Repository name to store issues\n  client_id: xxxxxxxxxxx # 申请的Client ID\n  client_secret: xxxxxxxxxxxxxxxxxxxxxx # 申请的Client Secret\n  admin_user: sineks # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n填好配置后保存。然后：\n```\nhexo clean\nhexo g\nhexo s //本地测试一下，没问题再deploy\nhexo d\n```\n不出意外在文章尾部应该就能看到gitalk模块了。第一次gitalk模块还不能用，提示什么`no issue`，需要自己登陆github后评论一下，相当于激活了，忘记截图，大概就这么回事吧。\n\n整个过程简单方便，不用什么新建这个文件修改那个配置的。搞定手工！\n\n","source":"_posts/add-gitalk-to-hexo.md","raw":"---\ntitle: Hexo博客Next主题添加Gitalk评论插件\ndate: 2020-04-12 20:29:35\ntags:\n    - hexo\n---\n为了给这个博客加个评论功能，网上搜索一番，找到N个教程，做了M个尝试，最后发现自己蠢死了，我用的Next主题版本自带gitalk功能，简单配置一下就行了。\n\n## 申请Github的OAuth应用程序\n\n[申请地址](https://github.com/settings/developers)\n登陆后点击右上的`New OAuth APP`按钮，看下图填写(盗一个知乎的图）：\n![newoauthapp](https://pic2.zhimg.com/80/v2-054ceed11a9a35e0855136ef21061b81_720w.jpg)\n需要注意的是，如果绑定了自己的域名，这里`主页网址`和`授权回调网址`请填写自己的域名地址，比如我填写的就是`https://blog.muzy.cc`。\n\n注册后会得到`Client ID`和`Client Secret`两个参数。\n\n## 配置Next主题\n\n我的Next主题版本是`NexT.Muse v7.7.1`，可以直接配置gitalk。打开位于`/themes/next/`下的`_config.yml`文件，找到`gitalk`模块，按照以下配置：\n```\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id: sineks # GitHub repo owner\n  repo: sineks.github.io # Repository name to store issues\n  client_id: xxxxxxxxxxx # 申请的Client ID\n  client_secret: xxxxxxxxxxxxxxxxxxxxxx # 申请的Client Secret\n  admin_user: sineks # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n填好配置后保存。然后：\n```\nhexo clean\nhexo g\nhexo s //本地测试一下，没问题再deploy\nhexo d\n```\n不出意外在文章尾部应该就能看到gitalk模块了。第一次gitalk模块还不能用，提示什么`no issue`，需要自己登陆github后评论一下，相当于激活了，忘记截图，大概就这么回事吧。\n\n整个过程简单方便，不用什么新建这个文件修改那个配置的。搞定手工！\n\n","slug":"add-gitalk-to-hexo","published":1,"updated":"2020-04-12T12:29:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rsenw0006v4g0c1ym7h0g","content":"<p>为了给这个博客加个评论功能，网上搜索一番，找到N个教程，做了M个尝试，最后发现自己蠢死了，我用的Next主题版本自带gitalk功能，简单配置一下就行了。</p>\n<h2 id=\"申请Github的OAuth应用程序\"><a href=\"#申请Github的OAuth应用程序\" class=\"headerlink\" title=\"申请Github的OAuth应用程序\"></a>申请Github的OAuth应用程序</h2><p><a href=\"https://github.com/settings/developers\">申请地址</a><br>登陆后点击右上的<code>New OAuth APP</code>按钮，看下图填写(盗一个知乎的图）：<br><img src=\"https://pic2.zhimg.com/80/v2-054ceed11a9a35e0855136ef21061b81_720w.jpg\" alt=\"newoauthapp\"><br>需要注意的是，如果绑定了自己的域名，这里<code>主页网址</code>和<code>授权回调网址</code>请填写自己的域名地址，比如我填写的就是<code>https://blog.muzy.cc</code>。</p>\n<p>注册后会得到<code>Client ID</code>和<code>Client Secret</code>两个参数。</p>\n<h2 id=\"配置Next主题\"><a href=\"#配置Next主题\" class=\"headerlink\" title=\"配置Next主题\"></a>配置Next主题</h2><p>我的Next主题版本是<code>NexT.Muse v7.7.1</code>，可以直接配置gitalk。打开位于<code>/themes/next/</code>下的<code>_config.yml</code>文件，找到<code>gitalk</code>模块，按照以下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Gitalk</span><br><span class=\"hljs-comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br><span class=\"hljs-attr\">gitalk:</span><br>  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">github_id:</span> <span class=\"hljs-string\">sineks</span> <span class=\"hljs-comment\"># GitHub repo owner</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">sineks.github.io</span> <span class=\"hljs-comment\"># Repository name to store issues</span><br>  <span class=\"hljs-attr\">client_id:</span> <span class=\"hljs-string\">xxxxxxxxxxx</span> <span class=\"hljs-comment\"># 申请的Client ID</span><br>  <span class=\"hljs-attr\">client_secret:</span> <span class=\"hljs-string\">xxxxxxxxxxxxxxxxxxxxxx</span> <span class=\"hljs-comment\"># 申请的Client Secret</span><br>  <span class=\"hljs-attr\">admin_user:</span> <span class=\"hljs-string\">sineks</span> <span class=\"hljs-comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br>  <span class=\"hljs-attr\">distraction_free_mode:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># Facebook-like distraction free mode</span><br>  <span class=\"hljs-comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br>  <span class=\"hljs-comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br>  <span class=\"hljs-comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br>  <span class=\"hljs-attr\">language:</span><br></code></pre></td></tr></table></figure>\n\n<p>填好配置后保存。然后：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">hexo clean<br>hexo g<br>hexo s <span class=\"hljs-regexp\">//</span>本地测试一下，没问题再deploy<br>hexo d<br></code></pre></td></tr></table></figure>\n<p>不出意外在文章尾部应该就能看到gitalk模块了。第一次gitalk模块还不能用，提示什么<code>no issue</code>，需要自己登陆github后评论一下，相当于激活了，忘记截图，大概就这么回事吧。</p>\n<p>整个过程简单方便，不用什么新建这个文件修改那个配置的。搞定手工！</p>\n","site":{"data":{}},"wordcount":1165,"excerpt":"","more":"<p>为了给这个博客加个评论功能，网上搜索一番，找到N个教程，做了M个尝试，最后发现自己蠢死了，我用的Next主题版本自带gitalk功能，简单配置一下就行了。</p>\n<h2 id=\"申请Github的OAuth应用程序\"><a href=\"#申请Github的OAuth应用程序\" class=\"headerlink\" title=\"申请Github的OAuth应用程序\"></a>申请Github的OAuth应用程序</h2><p><a href=\"https://github.com/settings/developers\">申请地址</a><br>登陆后点击右上的<code>New OAuth APP</code>按钮，看下图填写(盗一个知乎的图）：<br><img src=\"https://pic2.zhimg.com/80/v2-054ceed11a9a35e0855136ef21061b81_720w.jpg\" alt=\"newoauthapp\"><br>需要注意的是，如果绑定了自己的域名，这里<code>主页网址</code>和<code>授权回调网址</code>请填写自己的域名地址，比如我填写的就是<code>https://blog.muzy.cc</code>。</p>\n<p>注册后会得到<code>Client ID</code>和<code>Client Secret</code>两个参数。</p>\n<h2 id=\"配置Next主题\"><a href=\"#配置Next主题\" class=\"headerlink\" title=\"配置Next主题\"></a>配置Next主题</h2><p>我的Next主题版本是<code>NexT.Muse v7.7.1</code>，可以直接配置gitalk。打开位于<code>/themes/next/</code>下的<code>_config.yml</code>文件，找到<code>gitalk</code>模块，按照以下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># Gitalk</span><br><span class=\"hljs-comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br><span class=\"hljs-attr\">gitalk:</span><br>  <span class=\"hljs-attr\">enable:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-attr\">github_id:</span> <span class=\"hljs-string\">sineks</span> <span class=\"hljs-comment\"># GitHub repo owner</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">sineks.github.io</span> <span class=\"hljs-comment\"># Repository name to store issues</span><br>  <span class=\"hljs-attr\">client_id:</span> <span class=\"hljs-string\">xxxxxxxxxxx</span> <span class=\"hljs-comment\"># 申请的Client ID</span><br>  <span class=\"hljs-attr\">client_secret:</span> <span class=\"hljs-string\">xxxxxxxxxxxxxxxxxxxxxx</span> <span class=\"hljs-comment\"># 申请的Client Secret</span><br>  <span class=\"hljs-attr\">admin_user:</span> <span class=\"hljs-string\">sineks</span> <span class=\"hljs-comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br>  <span class=\"hljs-attr\">distraction_free_mode:</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\"># Facebook-like distraction free mode</span><br>  <span class=\"hljs-comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br>  <span class=\"hljs-comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br>  <span class=\"hljs-comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br>  <span class=\"hljs-attr\">language:</span><br></code></pre></td></tr></table></figure>\n\n<p>填好配置后保存。然后：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">hexo clean<br>hexo g<br>hexo s <span class=\"hljs-regexp\">//</span>本地测试一下，没问题再deploy<br>hexo d<br></code></pre></td></tr></table></figure>\n<p>不出意外在文章尾部应该就能看到gitalk模块了。第一次gitalk模块还不能用，提示什么<code>no issue</code>，需要自己登陆github后评论一下，相当于激活了，忘记截图，大概就这么回事吧。</p>\n<p>整个过程简单方便，不用什么新建这个文件修改那个配置的。搞定手工！</p>\n"},{"title":"第一篇文章发布","date":"2020-02-14T13:51:28.000Z","_content":"\n这篇“第一篇”文章来的相当晚，距离我建立这个Github的博客已经2个月了。\n\n一直都在折腾各种东西，有的想起来就在这里记录一下，有的折腾累了不想写了就过了。所以这其实没几篇文章。不过对比最近折腾的Wordpress，还是感觉Hexo简练，虽然部署上可能稍有一点门槛，但正适合我这种不折腾不舒服斯基人。\n\n还是希望自己能够坚持的写一写东西。Hexo博客也是一个不错的练习MD的好方法。\n\n","source":"_posts/firstpost.md","raw":"---\ntitle: 第一篇文章发布\ndate: 2020-02-14 21:51:28\ntags:\n---\n\n这篇“第一篇”文章来的相当晚，距离我建立这个Github的博客已经2个月了。\n\n一直都在折腾各种东西，有的想起来就在这里记录一下，有的折腾累了不想写了就过了。所以这其实没几篇文章。不过对比最近折腾的Wordpress，还是感觉Hexo简练，虽然部署上可能稍有一点门槛，但正适合我这种不折腾不舒服斯基人。\n\n还是希望自己能够坚持的写一写东西。Hexo博客也是一个不错的练习MD的好方法。\n\n","slug":"firstpost","published":1,"updated":"2020-02-14T13:51:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rsenz0008v4g0bobeed2p","content":"<p>这篇“第一篇”文章来的相当晚，距离我建立这个Github的博客已经2个月了。</p>\n<p>一直都在折腾各种东西，有的想起来就在这里记录一下，有的折腾累了不想写了就过了。所以这其实没几篇文章。不过对比最近折腾的Wordpress，还是感觉Hexo简练，虽然部署上可能稍有一点门槛，但正适合我这种不折腾不舒服斯基人。</p>\n<p>还是希望自己能够坚持的写一写东西。Hexo博客也是一个不错的练习MD的好方法。</p>\n","site":{"data":{}},"wordcount":188,"excerpt":"","more":"<p>这篇“第一篇”文章来的相当晚，距离我建立这个Github的博客已经2个月了。</p>\n<p>一直都在折腾各种东西，有的想起来就在这里记录一下，有的折腾累了不想写了就过了。所以这其实没几篇文章。不过对比最近折腾的Wordpress，还是感觉Hexo简练，虽然部署上可能稍有一点门槛，但正适合我这种不折腾不舒服斯基人。</p>\n<p>还是希望自己能够坚持的写一写东西。Hexo博客也是一个不错的练习MD的好方法。</p>\n"},{"title":"Hexo常用命令","date":"2020-03-18T12:30:41.000Z","_content":"\n折腾了几天在Github上部署了Hexo博客，后面就不弄了，我真是懒得可以。今天想起记录点东西，发掘连Hexo的基本操作都忘记了，还是得提醒自己记得一下。\n\n经常使用的就是发布博客的命令：\n\n```\nhexo new post \"title\"  # 发布新文章\nhexo g #生成静态页面\nhexo s #启用本地服务器，可以预览，地址为localhost:4000\nhexo d #发布到github\n```\n关于hexo的基本命令，没有什么比[官网文档](https://hexo.io/zh-cn/docs/index.html)更好的指南了，命令全在[这里](https://hexo.io/zh-cn/docs/commands)了，需要进一步研究的话就多看看。","source":"_posts/hexoblogcommand.md","raw":"---\ntitle: Hexo常用命令\ndate: 2020-03-18 20:30:41\ntags: hexo\n---\n\n折腾了几天在Github上部署了Hexo博客，后面就不弄了，我真是懒得可以。今天想起记录点东西，发掘连Hexo的基本操作都忘记了，还是得提醒自己记得一下。\n\n经常使用的就是发布博客的命令：\n\n```\nhexo new post \"title\"  # 发布新文章\nhexo g #生成静态页面\nhexo s #启用本地服务器，可以预览，地址为localhost:4000\nhexo d #发布到github\n```\n关于hexo的基本命令，没有什么比[官网文档](https://hexo.io/zh-cn/docs/index.html)更好的指南了，命令全在[这里](https://hexo.io/zh-cn/docs/commands)了，需要进一步研究的话就多看看。","slug":"hexoblogcommand","published":1,"updated":"2020-03-18T12:30:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rseo10009v4g0hr4c1yq7","content":"<p>折腾了几天在Github上部署了Hexo博客，后面就不弄了，我真是懒得可以。今天想起记录点东西，发掘连Hexo的基本操作都忘记了，还是得提醒自己记得一下。</p>\n<p>经常使用的就是发布博客的命令：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">post</span> <span class=\"hljs-string\">&quot;title&quot;</span>  <span class=\"hljs-meta\"># 发布新文章</span><br>hexo g <span class=\"hljs-meta\">#生成静态页面</span><br>hexo s <span class=\"hljs-meta\">#启用本地服务器，可以预览，地址为localhost:4000</span><br>hexo d <span class=\"hljs-meta\">#发布到github</span><br></code></pre></td></tr></table></figure>\n<p>关于hexo的基本命令，没有什么比<a href=\"https://hexo.io/zh-cn/docs/index.html\">官网文档</a>更好的指南了，命令全在<a href=\"https://hexo.io/zh-cn/docs/commands\">这里</a>了，需要进一步研究的话就多看看。</p>\n","site":{"data":{}},"wordcount":243,"excerpt":"","more":"<p>折腾了几天在Github上部署了Hexo博客，后面就不弄了，我真是懒得可以。今天想起记录点东西，发掘连Hexo的基本操作都忘记了，还是得提醒自己记得一下。</p>\n<p>经常使用的就是发布博客的命令：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">post</span> <span class=\"hljs-string\">&quot;title&quot;</span>  <span class=\"hljs-meta\"># 发布新文章</span><br>hexo g <span class=\"hljs-meta\">#生成静态页面</span><br>hexo s <span class=\"hljs-meta\">#启用本地服务器，可以预览，地址为localhost:4000</span><br>hexo d <span class=\"hljs-meta\">#发布到github</span><br></code></pre></td></tr></table></figure>\n<p>关于hexo的基本命令，没有什么比<a href=\"https://hexo.io/zh-cn/docs/index.html\">官网文档</a>更好的指南了，命令全在<a href=\"https://hexo.io/zh-cn/docs/commands\">这里</a>了，需要进一步研究的话就多看看。</p>\n"},{"title":"NextCloud升级后一直处于维护的解决办法","date":"2020-03-18T12:43:02.000Z","_content":"\n近期登陆nextcloud，提示可以升级到18.0.2（当前时18.0.0），于是点击升级。经历了漫长的等待后（没有梯子的情况下下载nextcloud包非常慢，我记得好像也就100多MB的东西，能下几个小时）直到出现Done，再打nextcloud网站却一直提示处于维护状态，网上搜索，解决办法如下：\n\n在nextcloud目录下（我的是/var/www/nextcloud)，输入：`sudo -u www-data php occ maintenance:mode --off`\n\n或者可以直接修改nextcloud的`config/config.php`文件，找到`maintenance => true`，改为`maintenance => false`，保存重新访问即可。\n\n","source":"_posts/nextcloudupdate.md","raw":"---\ntitle: NextCloud升级后一直处于维护的解决办法\ndate: 2020-03-18 20:43:02\ntags: nextcloud\n---\n\n近期登陆nextcloud，提示可以升级到18.0.2（当前时18.0.0），于是点击升级。经历了漫长的等待后（没有梯子的情况下下载nextcloud包非常慢，我记得好像也就100多MB的东西，能下几个小时）直到出现Done，再打nextcloud网站却一直提示处于维护状态，网上搜索，解决办法如下：\n\n在nextcloud目录下（我的是/var/www/nextcloud)，输入：`sudo -u www-data php occ maintenance:mode --off`\n\n或者可以直接修改nextcloud的`config/config.php`文件，找到`maintenance => true`，改为`maintenance => false`，保存重新访问即可。\n\n","slug":"nextcloudupdate","published":1,"updated":"2020-03-18T12:43:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rseo3000cv4g0f4go7s1k","content":"<p>近期登陆nextcloud，提示可以升级到18.0.2（当前时18.0.0），于是点击升级。经历了漫长的等待后（没有梯子的情况下下载nextcloud包非常慢，我记得好像也就100多MB的东西，能下几个小时）直到出现Done，再打nextcloud网站却一直提示处于维护状态，网上搜索，解决办法如下：</p>\n<p>在nextcloud目录下（我的是/var/www/nextcloud)，输入：<code>sudo -u www-data php occ maintenance:mode --off</code></p>\n<p>或者可以直接修改nextcloud的<code>config/config.php</code>文件，找到<code>maintenance =&gt; true</code>，改为<code>maintenance =&gt; false</code>，保存重新访问即可。</p>\n","site":{"data":{}},"wordcount":325,"excerpt":"","more":"<p>近期登陆nextcloud，提示可以升级到18.0.2（当前时18.0.0），于是点击升级。经历了漫长的等待后（没有梯子的情况下下载nextcloud包非常慢，我记得好像也就100多MB的东西，能下几个小时）直到出现Done，再打nextcloud网站却一直提示处于维护状态，网上搜索，解决办法如下：</p>\n<p>在nextcloud目录下（我的是/var/www/nextcloud)，输入：<code>sudo -u www-data php occ maintenance:mode --off</code></p>\n<p>或者可以直接修改nextcloud的<code>config/config.php</code>文件，找到<code>maintenance =&gt; true</code>，改为<code>maintenance =&gt; false</code>，保存重新访问即可。</p>\n"},{"title":"局域网安装配置Git服务器并实现往外访问和工作区同步到服务器","date":"2020-03-28T15:56:44.000Z","_content":"\n最近在折腾Git，想尝试自己建一个Git服务器。闲置的笔记本正好可以用来做Server，建立过程中也遇到一些问题，故在此记录。\n\n首先，整个环境为：\n- 局域网内笔记本安装Ubuntu Server 18.0.4\n- 有外网IP并已做好域名解析\n- 已做好端口映射，因为是通过SSH服务，端口映射为内网22，外网出于安全选了一个其它端口，因此外网访问时地址为：`ssh://domain:proxy/directory/to/githubrepo`\n\n建立Git服务器过程主要参考[廖雪峰教程](https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664)\n\n<!-- more -->\n\n## 1 安装Git\n\nUbuntu Server自带了Git，如果没有，请用命令：\n\n```\nsudo apt install git\n```\n\n进行安装\n\n## 2 创建一个git用户，用来运行git服务\n\n```\nsudo adduser git\n```\n\n其中`git`可以换成你喜欢的任何名字\n\n创建时需要设置用户`git`密码，随便写一个，后面我们用key来登录，密码基本用不到。`git`用户主要使用使用git服务，因此出于安全禁止git用户登录shell，编辑`/etc/passwd`:\n\n```\nsudo vim /etc/passwd\n```\n\n找到`git:x:1001:1001:,,,:/home/git:/bin/bash`，改为`git​:x:1001:1001:,,,:/home/git:/usr/bin/git-shell`\n\n这样，`git`用户就不可以登录shell，但是可以使用ssh访问git服务\n\n## 3 创建数字证书，用于登录\n\n在本地电脑（我的是windows）的git bash下：\n\n```\nssh -t rsa -C \"your_email\"\n```\n\n生成证书，因为本地电脑上有多个git仓库，生成证书时指定名称。\n\n把name.pub里面的公钥导入到服务器上`/home/git/.ssh/authorized_keys`中，`.ssh`文件夹和其下的`authorized_keys`文件需要手动创建。公钥一行一个。\n\n## 4 建立Git仓库并初始化\n\n选定一个目录作为Git仓库，假定为`/home/gitrepos/test`，在`/home/gitrepos`下输入命令：\n\n```\nsudo git init --bare test.git\n```\n\n`Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。`\n\n这里是引用教程的说法，老实说一开始我很懵逼。我以为Git服务器就是像Github一样，`git push`后会把版本信息和文件都同步到服务器上。后来查了许多资料才搞明白，加上`--bare`参数生成的裸仓库的意思，大概就是只做版本控制，不上传文件。工作区就是指我们的文件和文件夹，要同步工作区，后面细说。\n\n建立Git仓库后，将仓库所有者改为用户`git`：\n\n```\nsudo chown -R git:git /home/gitrepos/test.git\n```\n\n## 5 克隆服务器上的仓库到本地\n\n在本地电脑上用命令：\n\n```\ngit clone git@serveraddress/home/gitrepos/test.git\n```\n\n这里的`serveraddress`，如果只是在局域网内使用，可以直接用服务器的IP地址。但前文讲过，我们需要进行外网访问，并且我的外网访问端口不是22，那么这个命令可以写成：\n\n```\ngit clone git@ssh://domian:proxy/home/gitrepos/test.git\n```\n\n这样就可以通过外网来clone仓库。\n\n我用了另外一种方式，即在windows的`c:/用户/username/.ssh`下用`config`文件来配置`serveraddress`，因为我把证书全部放到这个文件夹下面了，有多个git仓库时，用`config`文件配置比较方便。`config`文件中配置这个git仓库的代码为：\n\n```\n// 自建的git Server，域名访问\nHost **Domain**\nHostName //**DomainName**\nport //自己定义的端口，例如1234\nUser git //服务器上的git用户名\nIdentityFile ~/.ssh/生成的证书名字\n```\n\n这样通过第一条命令也可以正常clone下来git仓库。\n\n## 6 同步工作区到服务器上\n\n我一直很纳闷我在本地Git文件夹中的文件在服务器上怎么找到，毕竟对于我一个菜鸟选手，看到文件才比较放心。查阅资料后，总结的方法如下：\n\n- 在服务器上把git仓库clone一份：\n\n  ```\n  git clone /home/gitrepos/test.git /home/workspace\n  ```\n\n  克隆后，在`/home/workspace`目录下会有一个`test`文件夹，跟本地克隆一样，文件夹里就会有工作区（文件和目录了）。\n\n- 实现每次本地push后，服务上自动把工作区同步到/home/workspace/test中：\n\n  首先要把`home/workspace/test`目录的所有者给用户`git`：\n\n  ```\n  sudo chown -R git:git /home/workspace/test\n  ```\n\n  然后在git仓库中（/home/gitrepos/test.git），建立一个钩子：\n\n  ```\n  cd /home/gitrepos/test.git/hooks\n  sudo touch post-receive\n  chmod -R 777 post-receive\n  sudo vim post-receive\n  ```\n\n  在`post-receive`中输入以下内容：\n\n  ```\n  #!/bin/sh\n  export LANG=zh_CN.UTF-8\n  cd /home/workspace/test  //这个是你每次要同步的文件夹\n  unset GIT_DIR  //git执行自动脚本的时候有执行一些自定义变量,所以我们在这里unset一下\n  git pull\n  ```\n\n  **注意**，这里因为生成和编辑`post-receive`时用的是`sudo`命令，`post-receive`所有者是`root`用户，要改成`git`用户才能生效。我在这里琢磨了半天才搞明白，改之前一直不能同步。\n\n- 做完上面操作后，在本地添加文件，`git push`后，在`/home/workspace/test`目录中就能看到自己添加的文件了。\n\n## 7 完结\n\n通过以上步骤后，能够实现外网访问局域网内的git服务器，并同步工作区到服务器上。整体其实很简单，但因为自己对Git的原理了解不多，很多都是照着网上的教程照虎画猫，因为无法解释为什么要这么干。Git是一个很有意思的工具，我认为廖雪峰的教程是入门最佳选择，想深入了解的话也可以看看[这个教程](https://git-scm.com/book)。\n\n当然，想要让Git服务器更强大，还有很多工作要做，比如添加证书管理功能（很多用户的时候很使用）、权限管理等等，这些跟我这个个人用户关系不大，加上才疏学浅，也不想再进一步折腾。到这个程度，已经可以让自己很好的使用了。","source":"_posts/setup-git-server-on-lan-server.md","raw":"---\ntitle: 局域网安装配置Git服务器并实现往外访问和工作区同步到服务器\ndate: 2020-03-28 23:56:44\ntags:\n  - git\n---\n\n最近在折腾Git，想尝试自己建一个Git服务器。闲置的笔记本正好可以用来做Server，建立过程中也遇到一些问题，故在此记录。\n\n首先，整个环境为：\n- 局域网内笔记本安装Ubuntu Server 18.0.4\n- 有外网IP并已做好域名解析\n- 已做好端口映射，因为是通过SSH服务，端口映射为内网22，外网出于安全选了一个其它端口，因此外网访问时地址为：`ssh://domain:proxy/directory/to/githubrepo`\n\n建立Git服务器过程主要参考[廖雪峰教程](https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664)\n\n<!-- more -->\n\n## 1 安装Git\n\nUbuntu Server自带了Git，如果没有，请用命令：\n\n```\nsudo apt install git\n```\n\n进行安装\n\n## 2 创建一个git用户，用来运行git服务\n\n```\nsudo adduser git\n```\n\n其中`git`可以换成你喜欢的任何名字\n\n创建时需要设置用户`git`密码，随便写一个，后面我们用key来登录，密码基本用不到。`git`用户主要使用使用git服务，因此出于安全禁止git用户登录shell，编辑`/etc/passwd`:\n\n```\nsudo vim /etc/passwd\n```\n\n找到`git:x:1001:1001:,,,:/home/git:/bin/bash`，改为`git​:x:1001:1001:,,,:/home/git:/usr/bin/git-shell`\n\n这样，`git`用户就不可以登录shell，但是可以使用ssh访问git服务\n\n## 3 创建数字证书，用于登录\n\n在本地电脑（我的是windows）的git bash下：\n\n```\nssh -t rsa -C \"your_email\"\n```\n\n生成证书，因为本地电脑上有多个git仓库，生成证书时指定名称。\n\n把name.pub里面的公钥导入到服务器上`/home/git/.ssh/authorized_keys`中，`.ssh`文件夹和其下的`authorized_keys`文件需要手动创建。公钥一行一个。\n\n## 4 建立Git仓库并初始化\n\n选定一个目录作为Git仓库，假定为`/home/gitrepos/test`，在`/home/gitrepos`下输入命令：\n\n```\nsudo git init --bare test.git\n```\n\n`Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。`\n\n这里是引用教程的说法，老实说一开始我很懵逼。我以为Git服务器就是像Github一样，`git push`后会把版本信息和文件都同步到服务器上。后来查了许多资料才搞明白，加上`--bare`参数生成的裸仓库的意思，大概就是只做版本控制，不上传文件。工作区就是指我们的文件和文件夹，要同步工作区，后面细说。\n\n建立Git仓库后，将仓库所有者改为用户`git`：\n\n```\nsudo chown -R git:git /home/gitrepos/test.git\n```\n\n## 5 克隆服务器上的仓库到本地\n\n在本地电脑上用命令：\n\n```\ngit clone git@serveraddress/home/gitrepos/test.git\n```\n\n这里的`serveraddress`，如果只是在局域网内使用，可以直接用服务器的IP地址。但前文讲过，我们需要进行外网访问，并且我的外网访问端口不是22，那么这个命令可以写成：\n\n```\ngit clone git@ssh://domian:proxy/home/gitrepos/test.git\n```\n\n这样就可以通过外网来clone仓库。\n\n我用了另外一种方式，即在windows的`c:/用户/username/.ssh`下用`config`文件来配置`serveraddress`，因为我把证书全部放到这个文件夹下面了，有多个git仓库时，用`config`文件配置比较方便。`config`文件中配置这个git仓库的代码为：\n\n```\n// 自建的git Server，域名访问\nHost **Domain**\nHostName //**DomainName**\nport //自己定义的端口，例如1234\nUser git //服务器上的git用户名\nIdentityFile ~/.ssh/生成的证书名字\n```\n\n这样通过第一条命令也可以正常clone下来git仓库。\n\n## 6 同步工作区到服务器上\n\n我一直很纳闷我在本地Git文件夹中的文件在服务器上怎么找到，毕竟对于我一个菜鸟选手，看到文件才比较放心。查阅资料后，总结的方法如下：\n\n- 在服务器上把git仓库clone一份：\n\n  ```\n  git clone /home/gitrepos/test.git /home/workspace\n  ```\n\n  克隆后，在`/home/workspace`目录下会有一个`test`文件夹，跟本地克隆一样，文件夹里就会有工作区（文件和目录了）。\n\n- 实现每次本地push后，服务上自动把工作区同步到/home/workspace/test中：\n\n  首先要把`home/workspace/test`目录的所有者给用户`git`：\n\n  ```\n  sudo chown -R git:git /home/workspace/test\n  ```\n\n  然后在git仓库中（/home/gitrepos/test.git），建立一个钩子：\n\n  ```\n  cd /home/gitrepos/test.git/hooks\n  sudo touch post-receive\n  chmod -R 777 post-receive\n  sudo vim post-receive\n  ```\n\n  在`post-receive`中输入以下内容：\n\n  ```\n  #!/bin/sh\n  export LANG=zh_CN.UTF-8\n  cd /home/workspace/test  //这个是你每次要同步的文件夹\n  unset GIT_DIR  //git执行自动脚本的时候有执行一些自定义变量,所以我们在这里unset一下\n  git pull\n  ```\n\n  **注意**，这里因为生成和编辑`post-receive`时用的是`sudo`命令，`post-receive`所有者是`root`用户，要改成`git`用户才能生效。我在这里琢磨了半天才搞明白，改之前一直不能同步。\n\n- 做完上面操作后，在本地添加文件，`git push`后，在`/home/workspace/test`目录中就能看到自己添加的文件了。\n\n## 7 完结\n\n通过以上步骤后，能够实现外网访问局域网内的git服务器，并同步工作区到服务器上。整体其实很简单，但因为自己对Git的原理了解不多，很多都是照着网上的教程照虎画猫，因为无法解释为什么要这么干。Git是一个很有意思的工具，我认为廖雪峰的教程是入门最佳选择，想深入了解的话也可以看看[这个教程](https://git-scm.com/book)。\n\n当然，想要让Git服务器更强大，还有很多工作要做，比如添加证书管理功能（很多用户的时候很使用）、权限管理等等，这些跟我这个个人用户关系不大，加上才疏学浅，也不想再进一步折腾。到这个程度，已经可以让自己很好的使用了。","slug":"setup-git-server-on-lan-server","published":1,"updated":"2020-03-28T15:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rseo5000dv4g0ecpn6pwv","content":"<p>最近在折腾Git，想尝试自己建一个Git服务器。闲置的笔记本正好可以用来做Server，建立过程中也遇到一些问题，故在此记录。</p>\n<p>首先，整个环境为：</p>\n<ul>\n<li>局域网内笔记本安装Ubuntu Server 18.0.4</li>\n<li>有外网IP并已做好域名解析</li>\n<li>已做好端口映射，因为是通过SSH服务，端口映射为内网22，外网出于安全选了一个其它端口，因此外网访问时地址为：<code>ssh://domain:proxy/directory/to/githubrepo</code></li>\n</ul>\n<p>建立Git服务器过程主要参考<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664\">廖雪峰教程</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1 安装Git\"></a>1 安装Git</h2><p>Ubuntu Server自带了Git，如果没有，请用命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">sudo apt <span class=\"hljs-keyword\">install</span> git<br></code></pre></td></tr></table></figure>\n\n<p>进行安装</p>\n<h2 id=\"2-创建一个git用户，用来运行git服务\"><a href=\"#2-创建一个git用户，用来运行git服务\" class=\"headerlink\" title=\"2 创建一个git用户，用来运行git服务\"></a>2 创建一个git用户，用来运行git服务</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo adduser git</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>git</code>可以换成你喜欢的任何名字</p>\n<p>创建时需要设置用户<code>git</code>密码，随便写一个，后面我们用key来登录，密码基本用不到。<code>git</code>用户主要使用使用git服务，因此出于安全禁止git用户登录shell，编辑<code>/etc/passwd</code>:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo vim <span class=\"hljs-regexp\">/etc/</span>passwd<br></code></pre></td></tr></table></figure>\n\n<p>找到<code>git:x:1001:1001:,,,:/home/git:/bin/bash</code>，改为<code>git​:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p>\n<p>这样，<code>git</code>用户就不可以登录shell，但是可以使用ssh访问git服务</p>\n<h2 id=\"3-创建数字证书，用于登录\"><a href=\"#3-创建数字证书，用于登录\" class=\"headerlink\" title=\"3 创建数字证书，用于登录\"></a>3 创建数字证书，用于登录</h2><p>在本地电脑（我的是windows）的git bash下：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;your_email&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>生成证书，因为本地电脑上有多个git仓库，生成证书时指定名称。</p>\n<p>把name.pub里面的公钥导入到服务器上<code>/home/git/.ssh/authorized_keys</code>中，<code>.ssh</code>文件夹和其下的<code>authorized_keys</code>文件需要手动创建。公钥一行一个。</p>\n<h2 id=\"4-建立Git仓库并初始化\"><a href=\"#4-建立Git仓库并初始化\" class=\"headerlink\" title=\"4 建立Git仓库并初始化\"></a>4 建立Git仓库并初始化</h2><p>选定一个目录作为Git仓库，假定为<code>/home/gitrepos/test</code>，在<code>/home/gitrepos</code>下输入命令：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">sudo git init <span class=\"hljs-comment\">--bare test.git</span><br></code></pre></td></tr></table></figure>\n\n<p><code>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。</code></p>\n<p>这里是引用教程的说法，老实说一开始我很懵逼。我以为Git服务器就是像Github一样，<code>git push</code>后会把版本信息和文件都同步到服务器上。后来查了许多资料才搞明白，加上<code>--bare</code>参数生成的裸仓库的意思，大概就是只做版本控制，不上传文件。工作区就是指我们的文件和文件夹，要同步工作区，后面细说。</p>\n<p>建立Git仓库后，将仓库所有者改为用户<code>git</code>：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo chown -R git:git <span class=\"hljs-regexp\">/home/gi</span>trepos/test.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-克隆服务器上的仓库到本地\"><a href=\"#5-克隆服务器上的仓库到本地\" class=\"headerlink\" title=\"5 克隆服务器上的仓库到本地\"></a>5 克隆服务器上的仓库到本地</h2><p>在本地电脑上用命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@serveraddress/home/gitrepos/test.git<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>serveraddress</code>，如果只是在局域网内使用，可以直接用服务器的IP地址。但前文讲过，我们需要进行外网访问，并且我的外网访问端口不是22，那么这个命令可以写成：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">git clone git<span class=\"hljs-variable\">@ssh</span><span class=\"hljs-symbol\">://domian</span><span class=\"hljs-symbol\">:proxy/home/gitrepos/test</span>.git<br></code></pre></td></tr></table></figure>\n\n<p>这样就可以通过外网来clone仓库。</p>\n<p>我用了另外一种方式，即在windows的<code>c:/用户/username/.ssh</code>下用<code>config</code>文件来配置<code>serveraddress</code>，因为我把证书全部放到这个文件夹下面了，有多个git仓库时，用<code>config</code>文件配置比较方便。<code>config</code>文件中配置这个git仓库的代码为：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 自建的git Server，域名访问<br>Host **Domain**<br>HostName <span class=\"hljs-regexp\">//</span>**DomainName**<br>port <span class=\"hljs-regexp\">//</span>自己定义的端口，例如<span class=\"hljs-number\">1234</span><br>User git <span class=\"hljs-regexp\">//</span>服务器上的git用户名<br>IdentityFile ~<span class=\"hljs-regexp\">/.ssh/</span>生成的证书名字<br></code></pre></td></tr></table></figure>\n\n<p>这样通过第一条命令也可以正常clone下来git仓库。</p>\n<h2 id=\"6-同步工作区到服务器上\"><a href=\"#6-同步工作区到服务器上\" class=\"headerlink\" title=\"6 同步工作区到服务器上\"></a>6 同步工作区到服务器上</h2><p>我一直很纳闷我在本地Git文件夹中的文件在服务器上怎么找到，毕竟对于我一个菜鸟选手，看到文件才比较放心。查阅资料后，总结的方法如下：</p>\n<ul>\n<li><p>在服务器上把git仓库clone一份：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone <span class=\"hljs-regexp\">/home/gi</span>trepos<span class=\"hljs-regexp\">/test.git /</span>home/workspace<br></code></pre></td></tr></table></figure>\n\n<p>克隆后，在<code>/home/workspace</code>目录下会有一个<code>test</code>文件夹，跟本地克隆一样，文件夹里就会有工作区（文件和目录了）。</p>\n</li>\n<li><p>实现每次本地push后，服务上自动把工作区同步到/home/workspace/test中：</p>\n<p>首先要把<code>home/workspace/test</code>目录的所有者给用户<code>git</code>：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo chown -R git:git <span class=\"hljs-regexp\">/home/</span>workspace/test<br></code></pre></td></tr></table></figure>\n\n<p>然后在git仓库中（/home/gitrepos/test.git），建立一个钩子：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"><span class=\"hljs-keyword\">cd</span> /home/gitrepos/<span class=\"hljs-keyword\">test</span>.git/hooks<br>sudo touch <span class=\"hljs-keyword\">post</span>-receive<br>chmod -R 777 <span class=\"hljs-keyword\">post</span>-receive<br>sudo vim <span class=\"hljs-keyword\">post</span>-receive<br></code></pre></td></tr></table></figure>\n\n<p>在<code>post-receive</code>中输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">export</span> LANG=zh_CN.UTF-8<br><span class=\"hljs-built_in\">cd</span> /home/workspace/<span class=\"hljs-built_in\">test</span>  //这个是你每次要同步的文件夹<br><span class=\"hljs-built_in\">unset</span> GIT_DIR  //git执行自动脚本的时候有执行一些自定义变量,所以我们在这里<span class=\"hljs-built_in\">unset</span>一下<br>git pull<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，这里因为生成和编辑<code>post-receive</code>时用的是<code>sudo</code>命令，<code>post-receive</code>所有者是<code>root</code>用户，要改成<code>git</code>用户才能生效。我在这里琢磨了半天才搞明白，改之前一直不能同步。</p>\n</li>\n<li><p>做完上面操作后，在本地添加文件，<code>git push</code>后，在<code>/home/workspace/test</code>目录中就能看到自己添加的文件了。</p>\n</li>\n</ul>\n<h2 id=\"7-完结\"><a href=\"#7-完结\" class=\"headerlink\" title=\"7 完结\"></a>7 完结</h2><p>通过以上步骤后，能够实现外网访问局域网内的git服务器，并同步工作区到服务器上。整体其实很简单，但因为自己对Git的原理了解不多，很多都是照着网上的教程照虎画猫，因为无法解释为什么要这么干。Git是一个很有意思的工具，我认为廖雪峰的教程是入门最佳选择，想深入了解的话也可以看看<a href=\"https://git-scm.com/book\">这个教程</a>。</p>\n<p>当然，想要让Git服务器更强大，还有很多工作要做，比如添加证书管理功能（很多用户的时候很使用）、权限管理等等，这些跟我这个个人用户关系不大，加上才疏学浅，也不想再进一步折腾。到这个程度，已经可以让自己很好的使用了。</p>\n","site":{"data":{}},"wordcount":2717,"excerpt":"<p>最近在折腾Git，想尝试自己建一个Git服务器。闲置的笔记本正好可以用来做Server，建立过程中也遇到一些问题，故在此记录。</p>\n<p>首先，整个环境为：</p>\n<ul>\n<li>局域网内笔记本安装Ubuntu Server 18.0.4</li>\n<li>有外网IP并已做好域名解析</li>\n<li>已做好端口映射，因为是通过SSH服务，端口映射为内网22，外网出于安全选了一个其它端口，因此外网访问时地址为：<code>ssh://domain:proxy/directory/to/githubrepo</code></li>\n</ul>\n<p>建立Git服务器过程主要参考<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664\">廖雪峰教程</a></p>","more":"<h2 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1 安装Git\"></a>1 安装Git</h2><p>Ubuntu Server自带了Git，如果没有，请用命令：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">sudo apt <span class=\"hljs-keyword\">install</span> git<br></code></pre></td></tr></table></figure>\n\n<p>进行安装</p>\n<h2 id=\"2-创建一个git用户，用来运行git服务\"><a href=\"#2-创建一个git用户，用来运行git服务\" class=\"headerlink\" title=\"2 创建一个git用户，用来运行git服务\"></a>2 创建一个git用户，用来运行git服务</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">sudo adduser git</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>git</code>可以换成你喜欢的任何名字</p>\n<p>创建时需要设置用户<code>git</code>密码，随便写一个，后面我们用key来登录，密码基本用不到。<code>git</code>用户主要使用使用git服务，因此出于安全禁止git用户登录shell，编辑<code>/etc/passwd</code>:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo vim <span class=\"hljs-regexp\">/etc/</span>passwd<br></code></pre></td></tr></table></figure>\n\n<p>找到<code>git:x:1001:1001:,,,:/home/git:/bin/bash</code>，改为<code>git​:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p>\n<p>这样，<code>git</code>用户就不可以登录shell，但是可以使用ssh访问git服务</p>\n<h2 id=\"3-创建数字证书，用于登录\"><a href=\"#3-创建数字证书，用于登录\" class=\"headerlink\" title=\"3 创建数字证书，用于登录\"></a>3 创建数字证书，用于登录</h2><p>在本地电脑（我的是windows）的git bash下：</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">ssh -<span class=\"hljs-built_in\">t</span> rsa -C <span class=\"hljs-string\">&quot;your_email&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>生成证书，因为本地电脑上有多个git仓库，生成证书时指定名称。</p>\n<p>把name.pub里面的公钥导入到服务器上<code>/home/git/.ssh/authorized_keys</code>中，<code>.ssh</code>文件夹和其下的<code>authorized_keys</code>文件需要手动创建。公钥一行一个。</p>\n<h2 id=\"4-建立Git仓库并初始化\"><a href=\"#4-建立Git仓库并初始化\" class=\"headerlink\" title=\"4 建立Git仓库并初始化\"></a>4 建立Git仓库并初始化</h2><p>选定一个目录作为Git仓库，假定为<code>/home/gitrepos/test</code>，在<code>/home/gitrepos</code>下输入命令：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">sudo git init <span class=\"hljs-comment\">--bare test.git</span><br></code></pre></td></tr></table></figure>\n\n<p><code>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。</code></p>\n<p>这里是引用教程的说法，老实说一开始我很懵逼。我以为Git服务器就是像Github一样，<code>git push</code>后会把版本信息和文件都同步到服务器上。后来查了许多资料才搞明白，加上<code>--bare</code>参数生成的裸仓库的意思，大概就是只做版本控制，不上传文件。工作区就是指我们的文件和文件夹，要同步工作区，后面细说。</p>\n<p>建立Git仓库后，将仓库所有者改为用户<code>git</code>：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo chown -R git:git <span class=\"hljs-regexp\">/home/gi</span>trepos/test.git<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-克隆服务器上的仓库到本地\"><a href=\"#5-克隆服务器上的仓库到本地\" class=\"headerlink\" title=\"5 克隆服务器上的仓库到本地\"></a>5 克隆服务器上的仓库到本地</h2><p>在本地电脑上用命令：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@serveraddress/home/gitrepos/test.git<br></code></pre></td></tr></table></figure>\n\n<p>这里的<code>serveraddress</code>，如果只是在局域网内使用，可以直接用服务器的IP地址。但前文讲过，我们需要进行外网访问，并且我的外网访问端口不是22，那么这个命令可以写成：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">git clone git<span class=\"hljs-variable\">@ssh</span><span class=\"hljs-symbol\">://domian</span><span class=\"hljs-symbol\">:proxy/home/gitrepos/test</span>.git<br></code></pre></td></tr></table></figure>\n\n<p>这样就可以通过外网来clone仓库。</p>\n<p>我用了另外一种方式，即在windows的<code>c:/用户/username/.ssh</code>下用<code>config</code>文件来配置<code>serveraddress</code>，因为我把证书全部放到这个文件夹下面了，有多个git仓库时，用<code>config</code>文件配置比较方便。<code>config</code>文件中配置这个git仓库的代码为：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span> 自建的git Server，域名访问<br>Host **Domain**<br>HostName <span class=\"hljs-regexp\">//</span>**DomainName**<br>port <span class=\"hljs-regexp\">//</span>自己定义的端口，例如<span class=\"hljs-number\">1234</span><br>User git <span class=\"hljs-regexp\">//</span>服务器上的git用户名<br>IdentityFile ~<span class=\"hljs-regexp\">/.ssh/</span>生成的证书名字<br></code></pre></td></tr></table></figure>\n\n<p>这样通过第一条命令也可以正常clone下来git仓库。</p>\n<h2 id=\"6-同步工作区到服务器上\"><a href=\"#6-同步工作区到服务器上\" class=\"headerlink\" title=\"6 同步工作区到服务器上\"></a>6 同步工作区到服务器上</h2><p>我一直很纳闷我在本地Git文件夹中的文件在服务器上怎么找到，毕竟对于我一个菜鸟选手，看到文件才比较放心。查阅资料后，总结的方法如下：</p>\n<ul>\n<li><p>在服务器上把git仓库clone一份：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">git clone <span class=\"hljs-regexp\">/home/gi</span>trepos<span class=\"hljs-regexp\">/test.git /</span>home/workspace<br></code></pre></td></tr></table></figure>\n\n<p>克隆后，在<code>/home/workspace</code>目录下会有一个<code>test</code>文件夹，跟本地克隆一样，文件夹里就会有工作区（文件和目录了）。</p>\n</li>\n<li><p>实现每次本地push后，服务上自动把工作区同步到/home/workspace/test中：</p>\n<p>首先要把<code>home/workspace/test</code>目录的所有者给用户<code>git</code>：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo chown -R git:git <span class=\"hljs-regexp\">/home/</span>workspace/test<br></code></pre></td></tr></table></figure>\n\n<p>然后在git仓库中（/home/gitrepos/test.git），建立一个钩子：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"><span class=\"hljs-keyword\">cd</span> /home/gitrepos/<span class=\"hljs-keyword\">test</span>.git/hooks<br>sudo touch <span class=\"hljs-keyword\">post</span>-receive<br>chmod -R 777 <span class=\"hljs-keyword\">post</span>-receive<br>sudo vim <span class=\"hljs-keyword\">post</span>-receive<br></code></pre></td></tr></table></figure>\n\n<p>在<code>post-receive</code>中输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">export</span> LANG=zh_CN.UTF-8<br><span class=\"hljs-built_in\">cd</span> /home/workspace/<span class=\"hljs-built_in\">test</span>  //这个是你每次要同步的文件夹<br><span class=\"hljs-built_in\">unset</span> GIT_DIR  //git执行自动脚本的时候有执行一些自定义变量,所以我们在这里<span class=\"hljs-built_in\">unset</span>一下<br>git pull<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，这里因为生成和编辑<code>post-receive</code>时用的是<code>sudo</code>命令，<code>post-receive</code>所有者是<code>root</code>用户，要改成<code>git</code>用户才能生效。我在这里琢磨了半天才搞明白，改之前一直不能同步。</p>\n</li>\n<li><p>做完上面操作后，在本地添加文件，<code>git push</code>后，在<code>/home/workspace/test</code>目录中就能看到自己添加的文件了。</p>\n</li>\n</ul>\n<h2 id=\"7-完结\"><a href=\"#7-完结\" class=\"headerlink\" title=\"7 完结\"></a>7 完结</h2><p>通过以上步骤后，能够实现外网访问局域网内的git服务器，并同步工作区到服务器上。整体其实很简单，但因为自己对Git的原理了解不多，很多都是照着网上的教程照虎画猫，因为无法解释为什么要这么干。Git是一个很有意思的工具，我认为廖雪峰的教程是入门最佳选择，想深入了解的话也可以看看<a href=\"https://git-scm.com/book\">这个教程</a>。</p>\n<p>当然，想要让Git服务器更强大，还有很多工作要做，比如添加证书管理功能（很多用户的时候很使用）、权限管理等等，这些跟我这个个人用户关系不大，加上才疏学浅，也不想再进一步折腾。到这个程度，已经可以让自己很好的使用了。</p>"},{"title":"SublimeText3配置Markdown","date":"2020-03-24T15:56:44.000Z","_content":"\n参考一篇有价值的[安装说明](https://blog.csdn.net/qq_20011607/article/details/81370236)，记录如下：\n\n### 0.安装Package Control\n略\n\n<!-- more -->\n\n### 1.安装Markdown插件\n#### 1.1 安装MarkdownEditing\n`Ctrl+Shift+P`，输入`Install Package`，输入`MarkdownEditing`，安装。\n安装后，我这里报错：\n```\nError loading syntax file \"Packages/Markdown/Markdown.sublime-syntax\": Unable to read Packages/Markdown/Markdown.sublime-syntax\n```\n网上搜的办法：\n打开`Preferences.sublime-settings`：\n```\n{\n    \"ignored_packages\":[\n        \"Markdown\"\n    ]\n}\n```\n把\"Markdown\"删除即可。\n\n#### 1.2 安装MarkdownPreview\n安装方式如上。安装后，配置快捷键，在`配置-快捷键`打开的文件的右侧栏的中括号中添加一行代码：\n```\n{ \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\": {\"target\": \"browser\", \"parser\":\"markdown\"}  }\n```\n其中，alt+m可以自己定义，parser后面的markdown可以写github，则调用github的渲染方式，需考虑连接github的速度，并且据说一天只能调用60次。我没配置，也没验证。\n\n#### 1.3 安装配置LiveReload\n首先，如前Markdown Preview安装成功后，设置前文所述的快捷键（如需），打开其配置文件 ```Preferences -> Package Settings -> Markdown Preview -> Settings```，检查左侧```enable_autoreload```条目是否为true，若是，跳过。若不是，右侧栏加一条下面这个后重启Sublime:\n```\n{\n    \"enable_autoreload\": true\n}\n```\n然后安装LiveReload。\n安装成功后，再次在Package Control中安装`LiveReload: Enable/disable plug-ins`,并选择`Simple Reload with delay (400ms)`或者`Simple Reload with delay`，两者区别在于前者有400ms延迟。\n\n**全部安装配置成功后，编辑md文件，保存，alt+m在浏览器中打开。继续编辑md文件，保存，浏览器中会自动刷新。**\n\n\n","source":"_posts/sublimetext3markdwon.md","raw":"---\ntitle: SublimeText3配置Markdown\ndate: 2020-03-24 23:56:44\ntags: markdown\n---\n\n参考一篇有价值的[安装说明](https://blog.csdn.net/qq_20011607/article/details/81370236)，记录如下：\n\n### 0.安装Package Control\n略\n\n<!-- more -->\n\n### 1.安装Markdown插件\n#### 1.1 安装MarkdownEditing\n`Ctrl+Shift+P`，输入`Install Package`，输入`MarkdownEditing`，安装。\n安装后，我这里报错：\n```\nError loading syntax file \"Packages/Markdown/Markdown.sublime-syntax\": Unable to read Packages/Markdown/Markdown.sublime-syntax\n```\n网上搜的办法：\n打开`Preferences.sublime-settings`：\n```\n{\n    \"ignored_packages\":[\n        \"Markdown\"\n    ]\n}\n```\n把\"Markdown\"删除即可。\n\n#### 1.2 安装MarkdownPreview\n安装方式如上。安装后，配置快捷键，在`配置-快捷键`打开的文件的右侧栏的中括号中添加一行代码：\n```\n{ \"keys\": [\"alt+m\"], \"command\": \"markdown_preview\", \"args\": {\"target\": \"browser\", \"parser\":\"markdown\"}  }\n```\n其中，alt+m可以自己定义，parser后面的markdown可以写github，则调用github的渲染方式，需考虑连接github的速度，并且据说一天只能调用60次。我没配置，也没验证。\n\n#### 1.3 安装配置LiveReload\n首先，如前Markdown Preview安装成功后，设置前文所述的快捷键（如需），打开其配置文件 ```Preferences -> Package Settings -> Markdown Preview -> Settings```，检查左侧```enable_autoreload```条目是否为true，若是，跳过。若不是，右侧栏加一条下面这个后重启Sublime:\n```\n{\n    \"enable_autoreload\": true\n}\n```\n然后安装LiveReload。\n安装成功后，再次在Package Control中安装`LiveReload: Enable/disable plug-ins`,并选择`Simple Reload with delay (400ms)`或者`Simple Reload with delay`，两者区别在于前者有400ms延迟。\n\n**全部安装配置成功后，编辑md文件，保存，alt+m在浏览器中打开。继续编辑md文件，保存，浏览器中会自动刷新。**\n\n\n","slug":"sublimetext3markdwon","published":1,"updated":"2020-03-24T15:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rseo7000fv4g06n818h74","content":"<p>参考一篇有价值的<a href=\"https://blog.csdn.net/qq_20011607/article/details/81370236\">安装说明</a>，记录如下：</p>\n<h3 id=\"0-安装Package-Control\"><a href=\"#0-安装Package-Control\" class=\"headerlink\" title=\"0.安装Package Control\"></a>0.安装Package Control</h3><p>略</p>\n<span id=\"more\"></span>\n\n<h3 id=\"1-安装Markdown插件\"><a href=\"#1-安装Markdown插件\" class=\"headerlink\" title=\"1.安装Markdown插件\"></a>1.安装Markdown插件</h3><h4 id=\"1-1-安装MarkdownEditing\"><a href=\"#1-1-安装MarkdownEditing\" class=\"headerlink\" title=\"1.1 安装MarkdownEditing\"></a>1.1 安装MarkdownEditing</h4><p><code>Ctrl+Shift+P</code>，输入<code>Install Package</code>，输入<code>MarkdownEditing</code>，安装。<br>安装后，我这里报错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\"><span class=\"hljs-keyword\">Error </span>loading syntax file &quot;Packages/Markdown/Markdown.sublime-syntax&quot;: Unable to read Packages/Markdown/Markdown.sublime-syntax<br></code></pre></td></tr></table></figure>\n<p>网上搜的办法：<br>打开<code>Preferences.sublime-settings</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;ignored_packages&quot;</span>:[<br>        <span class=\"hljs-string\">&quot;Markdown&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>把”Markdown”删除即可。</p>\n<h4 id=\"1-2-安装MarkdownPreview\"><a href=\"#1-2-安装MarkdownPreview\" class=\"headerlink\" title=\"1.2 安装MarkdownPreview\"></a>1.2 安装MarkdownPreview</h4><p>安装方式如上。安装后，配置快捷键，在<code>配置-快捷键</code>打开的文件的右侧栏的中括号中添加一行代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123; <span class=\"hljs-attr\">&quot;keys&quot;</span>: [<span class=\"hljs-string\">&quot;alt+m&quot;</span>], <span class=\"hljs-attr\">&quot;command&quot;</span>: <span class=\"hljs-string\">&quot;markdown_preview&quot;</span>, <span class=\"hljs-attr\">&quot;args&quot;</span>: &#123;<span class=\"hljs-attr\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;browser&quot;</span>, <span class=\"hljs-attr\">&quot;parser&quot;</span>:<span class=\"hljs-string\">&quot;markdown&quot;</span>&#125;  &#125;<br></code></pre></td></tr></table></figure>\n<p>其中，alt+m可以自己定义，parser后面的markdown可以写github，则调用github的渲染方式，需考虑连接github的速度，并且据说一天只能调用60次。我没配置，也没验证。</p>\n<h4 id=\"1-3-安装配置LiveReload\"><a href=\"#1-3-安装配置LiveReload\" class=\"headerlink\" title=\"1.3 安装配置LiveReload\"></a>1.3 安装配置LiveReload</h4><p>首先，如前Markdown Preview安装成功后，设置前文所述的快捷键（如需），打开其配置文件 <code>Preferences -&gt; Package Settings -&gt; Markdown Preview -&gt; Settings</code>，检查左侧<code>enable_autoreload</code>条目是否为true，若是，跳过。若不是，右侧栏加一条下面这个后重启Sublime:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;enable_autoreload&quot;</span>: <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后安装LiveReload。<br>安装成功后，再次在Package Control中安装<code>LiveReload: Enable/disable plug-ins</code>,并选择<code>Simple Reload with delay (400ms)</code>或者<code>Simple Reload with delay</code>，两者区别在于前者有400ms延迟。</p>\n<p><strong>全部安装配置成功后，编辑md文件，保存，alt+m在浏览器中打开。继续编辑md文件，保存，浏览器中会自动刷新。</strong></p>\n","site":{"data":{}},"wordcount":1194,"excerpt":"<p>参考一篇有价值的<a href=\"https://blog.csdn.net/qq_20011607/article/details/81370236\">安装说明</a>，记录如下：</p>\n<h3 id=\"0-安装Package-Control\"><a href=\"#0-安装Package-Control\" class=\"headerlink\" title=\"0.安装Package Control\"></a>0.安装Package Control</h3><p>略</p>","more":"<h3 id=\"1-安装Markdown插件\"><a href=\"#1-安装Markdown插件\" class=\"headerlink\" title=\"1.安装Markdown插件\"></a>1.安装Markdown插件</h3><h4 id=\"1-1-安装MarkdownEditing\"><a href=\"#1-1-安装MarkdownEditing\" class=\"headerlink\" title=\"1.1 安装MarkdownEditing\"></a>1.1 安装MarkdownEditing</h4><p><code>Ctrl+Shift+P</code>，输入<code>Install Package</code>，输入<code>MarkdownEditing</code>，安装。<br>安装后，我这里报错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\"><span class=\"hljs-keyword\">Error </span>loading syntax file &quot;Packages/Markdown/Markdown.sublime-syntax&quot;: Unable to read Packages/Markdown/Markdown.sublime-syntax<br></code></pre></td></tr></table></figure>\n<p>网上搜的办法：<br>打开<code>Preferences.sublime-settings</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;ignored_packages&quot;</span>:[<br>        <span class=\"hljs-string\">&quot;Markdown&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>把”Markdown”删除即可。</p>\n<h4 id=\"1-2-安装MarkdownPreview\"><a href=\"#1-2-安装MarkdownPreview\" class=\"headerlink\" title=\"1.2 安装MarkdownPreview\"></a>1.2 安装MarkdownPreview</h4><p>安装方式如上。安装后，配置快捷键，在<code>配置-快捷键</code>打开的文件的右侧栏的中括号中添加一行代码：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123; <span class=\"hljs-attr\">&quot;keys&quot;</span>: [<span class=\"hljs-string\">&quot;alt+m&quot;</span>], <span class=\"hljs-attr\">&quot;command&quot;</span>: <span class=\"hljs-string\">&quot;markdown_preview&quot;</span>, <span class=\"hljs-attr\">&quot;args&quot;</span>: &#123;<span class=\"hljs-attr\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;browser&quot;</span>, <span class=\"hljs-attr\">&quot;parser&quot;</span>:<span class=\"hljs-string\">&quot;markdown&quot;</span>&#125;  &#125;<br></code></pre></td></tr></table></figure>\n<p>其中，alt+m可以自己定义，parser后面的markdown可以写github，则调用github的渲染方式，需考虑连接github的速度，并且据说一天只能调用60次。我没配置，也没验证。</p>\n<h4 id=\"1-3-安装配置LiveReload\"><a href=\"#1-3-安装配置LiveReload\" class=\"headerlink\" title=\"1.3 安装配置LiveReload\"></a>1.3 安装配置LiveReload</h4><p>首先，如前Markdown Preview安装成功后，设置前文所述的快捷键（如需），打开其配置文件 <code>Preferences -&gt; Package Settings -&gt; Markdown Preview -&gt; Settings</code>，检查左侧<code>enable_autoreload</code>条目是否为true，若是，跳过。若不是，右侧栏加一条下面这个后重启Sublime:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;enable_autoreload&quot;</span>: <span class=\"hljs-literal\">true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后安装LiveReload。<br>安装成功后，再次在Package Control中安装<code>LiveReload: Enable/disable plug-ins</code>,并选择<code>Simple Reload with delay (400ms)</code>或者<code>Simple Reload with delay</code>，两者区别在于前者有400ms延迟。</p>\n<p><strong>全部安装配置成功后，编辑md文件，保存，alt+m在浏览器中打开。继续编辑md文件，保存，浏览器中会自动刷新。</strong></p>"},{"title":"testnew","date":"2021-10-25T09:08:00.000Z","_content":"\n**更换电脑后，测试一下Hexo**\n\n看看是否能发布成功","source":"_posts/testnew.md","raw":"---\ntitle: testnew\ntags: []\ncategories: []\ndate: 2021-10-25 17:08:00\n---\n\n**更换电脑后，测试一下Hexo**\n\n看看是否能发布成功","slug":"testnew","published":1,"updated":"2021-10-25T09:08:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv6rseo8000hv4g053el4p6q","content":"<p><strong>更换电脑后，测试一下Hexo</strong></p>\n<p>看看是否能发布成功</p>\n","site":{"data":{}},"wordcount":23,"excerpt":"","more":"<p><strong>更换电脑后，测试一下Hexo</strong></p>\n<p>看看是否能发布成功</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv6rsent0004v4g0eypp9nr8","category_id":"ckv6rsenz0007v4g07byb5qgf","_id":"ckv6rseo8000gv4g0dbkxgcav"}],"PostTag":[{"post_id":"ckv6rsenq0003v4g0h4y3e5g5","tag_id":"ckv6rsenu0005v4g0h6g7h470","_id":"ckv6rseo3000bv4g01uqx2hi0"},{"post_id":"ckv6rsent0004v4g0eypp9nr8","tag_id":"ckv6rseo2000av4g03eqx9x50","_id":"ckv6rseod000kv4g0eyqfab7t"},{"post_id":"ckv6rsent0004v4g0eypp9nr8","tag_id":"ckv6rseo6000ev4g05y55cte0","_id":"ckv6rseoe000lv4g01q3s6v94"},{"post_id":"ckv6rsent0004v4g0eypp9nr8","tag_id":"ckv6rsenu0005v4g0h6g7h470","_id":"ckv6rseoe000nv4g07jydg7x5"},{"post_id":"ckv6rsenw0006v4g0c1ym7h0g","tag_id":"ckv6rseo2000av4g03eqx9x50","_id":"ckv6rseof000ov4g0hnrkhgm3"},{"post_id":"ckv6rseo10009v4g0hr4c1yq7","tag_id":"ckv6rseo2000av4g03eqx9x50","_id":"ckv6rseog000qv4g0aphdbozb"},{"post_id":"ckv6rseo3000cv4g0f4go7s1k","tag_id":"ckv6rseof000pv4g0ey1z2og7","_id":"ckv6rseog000sv4g08qnr53u3"},{"post_id":"ckv6rseo5000dv4g0ecpn6pwv","tag_id":"ckv6rseo6000ev4g05y55cte0","_id":"ckv6rseoh000uv4g077h93blk"},{"post_id":"ckv6rseo7000fv4g06n818h74","tag_id":"ckv6rseoh000tv4g0a0d39ijp","_id":"ckv6rseoi000vv4g03asob0op"}],"Tag":[{"name":"github","_id":"ckv6rsenu0005v4g0h6g7h470"},{"name":"hexo","_id":"ckv6rseo2000av4g03eqx9x50"},{"name":"git","_id":"ckv6rseo6000ev4g05y55cte0"},{"name":"nextcloud","_id":"ckv6rseof000pv4g0ey1z2og7"},{"name":"markdown","_id":"ckv6rseoh000tv4g0a0d39ijp"}]}}